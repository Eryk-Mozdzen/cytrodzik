
Ariadna_Motor_Wigilia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e94  08005e94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e9c  08005e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000000c  08005eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08005eb0  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017745  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c13  00000000  00000000  00037781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  0003b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d3c  00000000  00000000  0003c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014720  00000000  00000000  00063fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f48dd  00000000  00000000  0007870c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cfe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043d8  00000000  00000000  0016d03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e34 	.word	0x08005e34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005e34 	.word	0x08005e34

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80007e8:	f000 b96e 	b.w	8000ac8 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468c      	mov	ip, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8083 	bne.w	800091a <__udivmoddi4+0x116>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d947      	bls.n	80008aa <__udivmoddi4+0xa6>
 800081a:	fab2 f282 	clz	r2, r2
 800081e:	b142      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 8000820:	f1c2 0020 	rsb	r0, r2, #32
 8000824:	fa24 f000 	lsr.w	r0, r4, r0
 8000828:	4091      	lsls	r1, r2
 800082a:	4097      	lsls	r7, r2
 800082c:	ea40 0c01 	orr.w	ip, r0, r1
 8000830:	4094      	lsls	r4, r2
 8000832:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000836:	0c23      	lsrs	r3, r4, #16
 8000838:	fbbc f6f8 	udiv	r6, ip, r8
 800083c:	fa1f fe87 	uxth.w	lr, r7
 8000840:	fb08 c116 	mls	r1, r8, r6, ip
 8000844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000848:	fb06 f10e 	mul.w	r1, r6, lr
 800084c:	4299      	cmp	r1, r3
 800084e:	d909      	bls.n	8000864 <__udivmoddi4+0x60>
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000856:	f080 8119 	bcs.w	8000a8c <__udivmoddi4+0x288>
 800085a:	4299      	cmp	r1, r3
 800085c:	f240 8116 	bls.w	8000a8c <__udivmoddi4+0x288>
 8000860:	3e02      	subs	r6, #2
 8000862:	443b      	add	r3, r7
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f0f8 	udiv	r0, r3, r8
 800086c:	fb08 3310 	mls	r3, r8, r0, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb00 fe0e 	mul.w	lr, r0, lr
 8000878:	45a6      	cmp	lr, r4
 800087a:	d909      	bls.n	8000890 <__udivmoddi4+0x8c>
 800087c:	193c      	adds	r4, r7, r4
 800087e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000882:	f080 8105 	bcs.w	8000a90 <__udivmoddi4+0x28c>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f240 8102 	bls.w	8000a90 <__udivmoddi4+0x28c>
 800088c:	3802      	subs	r0, #2
 800088e:	443c      	add	r4, r7
 8000890:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000894:	eba4 040e 	sub.w	r4, r4, lr
 8000898:	2600      	movs	r6, #0
 800089a:	b11d      	cbz	r5, 80008a4 <__udivmoddi4+0xa0>
 800089c:	40d4      	lsrs	r4, r2
 800089e:	2300      	movs	r3, #0
 80008a0:	e9c5 4300 	strd	r4, r3, [r5]
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	b902      	cbnz	r2, 80008ae <__udivmoddi4+0xaa>
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	fab2 f282 	clz	r2, r2
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d150      	bne.n	8000958 <__udivmoddi4+0x154>
 80008b6:	1bcb      	subs	r3, r1, r7
 80008b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008bc:	fa1f f887 	uxth.w	r8, r7
 80008c0:	2601      	movs	r6, #1
 80008c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008c6:	0c21      	lsrs	r1, r4, #16
 80008c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d0:	fb08 f30c 	mul.w	r3, r8, ip
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d907      	bls.n	80008e8 <__udivmoddi4+0xe4>
 80008d8:	1879      	adds	r1, r7, r1
 80008da:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80008de:	d202      	bcs.n	80008e6 <__udivmoddi4+0xe2>
 80008e0:	428b      	cmp	r3, r1
 80008e2:	f200 80e9 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 80008e6:	4684      	mov	ip, r0
 80008e8:	1ac9      	subs	r1, r1, r3
 80008ea:	b2a3      	uxth	r3, r4
 80008ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80008f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80008f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008f8:	fb08 f800 	mul.w	r8, r8, r0
 80008fc:	45a0      	cmp	r8, r4
 80008fe:	d907      	bls.n	8000910 <__udivmoddi4+0x10c>
 8000900:	193c      	adds	r4, r7, r4
 8000902:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x10a>
 8000908:	45a0      	cmp	r8, r4
 800090a:	f200 80d9 	bhi.w	8000ac0 <__udivmoddi4+0x2bc>
 800090e:	4618      	mov	r0, r3
 8000910:	eba4 0408 	sub.w	r4, r4, r8
 8000914:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000918:	e7bf      	b.n	800089a <__udivmoddi4+0x96>
 800091a:	428b      	cmp	r3, r1
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x12e>
 800091e:	2d00      	cmp	r5, #0
 8000920:	f000 80b1 	beq.w	8000a86 <__udivmoddi4+0x282>
 8000924:	2600      	movs	r6, #0
 8000926:	e9c5 0100 	strd	r0, r1, [r5]
 800092a:	4630      	mov	r0, r6
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	fab3 f683 	clz	r6, r3
 8000936:	2e00      	cmp	r6, #0
 8000938:	d14a      	bne.n	80009d0 <__udivmoddi4+0x1cc>
 800093a:	428b      	cmp	r3, r1
 800093c:	d302      	bcc.n	8000944 <__udivmoddi4+0x140>
 800093e:	4282      	cmp	r2, r0
 8000940:	f200 80b8 	bhi.w	8000ab4 <__udivmoddi4+0x2b0>
 8000944:	1a84      	subs	r4, r0, r2
 8000946:	eb61 0103 	sbc.w	r1, r1, r3
 800094a:	2001      	movs	r0, #1
 800094c:	468c      	mov	ip, r1
 800094e:	2d00      	cmp	r5, #0
 8000950:	d0a8      	beq.n	80008a4 <__udivmoddi4+0xa0>
 8000952:	e9c5 4c00 	strd	r4, ip, [r5]
 8000956:	e7a5      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000958:	f1c2 0320 	rsb	r3, r2, #32
 800095c:	fa20 f603 	lsr.w	r6, r0, r3
 8000960:	4097      	lsls	r7, r2
 8000962:	fa01 f002 	lsl.w	r0, r1, r2
 8000966:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800096a:	40d9      	lsrs	r1, r3
 800096c:	4330      	orrs	r0, r6
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	fbb1 f6fe 	udiv	r6, r1, lr
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	fb0e 1116 	mls	r1, lr, r6, r1
 800097c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000980:	fb06 f108 	mul.w	r1, r6, r8
 8000984:	4299      	cmp	r1, r3
 8000986:	fa04 f402 	lsl.w	r4, r4, r2
 800098a:	d909      	bls.n	80009a0 <__udivmoddi4+0x19c>
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000992:	f080 808d 	bcs.w	8000ab0 <__udivmoddi4+0x2ac>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 808a 	bls.w	8000ab0 <__udivmoddi4+0x2ac>
 800099c:	3e02      	subs	r6, #2
 800099e:	443b      	add	r3, r7
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b281      	uxth	r1, r0
 80009a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b0:	fb00 f308 	mul.w	r3, r0, r8
 80009b4:	428b      	cmp	r3, r1
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x1c4>
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80009be:	d273      	bcs.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c0:	428b      	cmp	r3, r1
 80009c2:	d971      	bls.n	8000aa8 <__udivmoddi4+0x2a4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	4439      	add	r1, r7
 80009c8:	1acb      	subs	r3, r1, r3
 80009ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009ce:	e778      	b.n	80008c2 <__udivmoddi4+0xbe>
 80009d0:	f1c6 0c20 	rsb	ip, r6, #32
 80009d4:	fa03 f406 	lsl.w	r4, r3, r6
 80009d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009dc:	431c      	orrs	r4, r3
 80009de:	fa20 f70c 	lsr.w	r7, r0, ip
 80009e2:	fa01 f306 	lsl.w	r3, r1, r6
 80009e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80009ee:	431f      	orrs	r7, r3
 80009f0:	0c3b      	lsrs	r3, r7, #16
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fa1f f884 	uxth.w	r8, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a02:	fb09 fa08 	mul.w	sl, r9, r8
 8000a06:	458a      	cmp	sl, r1
 8000a08:	fa02 f206 	lsl.w	r2, r2, r6
 8000a0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x220>
 8000a12:	1861      	adds	r1, r4, r1
 8000a14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a18:	d248      	bcs.n	8000aac <__udivmoddi4+0x2a8>
 8000a1a:	458a      	cmp	sl, r1
 8000a1c:	d946      	bls.n	8000aac <__udivmoddi4+0x2a8>
 8000a1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a22:	4421      	add	r1, r4
 8000a24:	eba1 010a 	sub.w	r1, r1, sl
 8000a28:	b2bf      	uxth	r7, r7
 8000a2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a36:	fb00 f808 	mul.w	r8, r0, r8
 8000a3a:	45b8      	cmp	r8, r7
 8000a3c:	d907      	bls.n	8000a4e <__udivmoddi4+0x24a>
 8000a3e:	19e7      	adds	r7, r4, r7
 8000a40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a44:	d22e      	bcs.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a46:	45b8      	cmp	r8, r7
 8000a48:	d92c      	bls.n	8000aa4 <__udivmoddi4+0x2a0>
 8000a4a:	3802      	subs	r0, #2
 8000a4c:	4427      	add	r7, r4
 8000a4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a52:	eba7 0708 	sub.w	r7, r7, r8
 8000a56:	fba0 8902 	umull	r8, r9, r0, r2
 8000a5a:	454f      	cmp	r7, r9
 8000a5c:	46c6      	mov	lr, r8
 8000a5e:	4649      	mov	r1, r9
 8000a60:	d31a      	bcc.n	8000a98 <__udivmoddi4+0x294>
 8000a62:	d017      	beq.n	8000a94 <__udivmoddi4+0x290>
 8000a64:	b15d      	cbz	r5, 8000a7e <__udivmoddi4+0x27a>
 8000a66:	ebb3 020e 	subs.w	r2, r3, lr
 8000a6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a72:	40f2      	lsrs	r2, r6
 8000a74:	ea4c 0202 	orr.w	r2, ip, r2
 8000a78:	40f7      	lsrs	r7, r6
 8000a7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a7e:	2600      	movs	r6, #0
 8000a80:	4631      	mov	r1, r6
 8000a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a86:	462e      	mov	r6, r5
 8000a88:	4628      	mov	r0, r5
 8000a8a:	e70b      	b.n	80008a4 <__udivmoddi4+0xa0>
 8000a8c:	4606      	mov	r6, r0
 8000a8e:	e6e9      	b.n	8000864 <__udivmoddi4+0x60>
 8000a90:	4618      	mov	r0, r3
 8000a92:	e6fd      	b.n	8000890 <__udivmoddi4+0x8c>
 8000a94:	4543      	cmp	r3, r8
 8000a96:	d2e5      	bcs.n	8000a64 <__udivmoddi4+0x260>
 8000a98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	e7df      	b.n	8000a64 <__udivmoddi4+0x260>
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	e7d2      	b.n	8000a4e <__udivmoddi4+0x24a>
 8000aa8:	4660      	mov	r0, ip
 8000aaa:	e78d      	b.n	80009c8 <__udivmoddi4+0x1c4>
 8000aac:	4681      	mov	r9, r0
 8000aae:	e7b9      	b.n	8000a24 <__udivmoddi4+0x220>
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	e775      	b.n	80009a0 <__udivmoddi4+0x19c>
 8000ab4:	4630      	mov	r0, r6
 8000ab6:	e74a      	b.n	800094e <__udivmoddi4+0x14a>
 8000ab8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000abc:	4439      	add	r1, r7
 8000abe:	e713      	b.n	80008e8 <__udivmoddi4+0xe4>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	e724      	b.n	8000910 <__udivmoddi4+0x10c>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_DMA_Init+0x38>)
 8000ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	200f      	movs	r0, #15
 8000af0:	f001 f8b9 	bl	8001c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000af4:	200f      	movs	r0, #15
 8000af6:	f001 f8d2 	bl	8001c9e <HAL_NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	; 0x28
 8000b0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a3e      	ldr	r2, [pc, #248]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a38      	ldr	r2, [pc, #224]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	4a32      	ldr	r2, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a2c      	ldr	r2, [pc, #176]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_GPIO_Init+0x114>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f001 fcc5 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_RIGHT_B_Pin|MOTOR_RIGHT_A_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2160      	movs	r1, #96	; 0x60
 8000b8e:	4824      	ldr	r0, [pc, #144]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000b90:	f001 fcc0 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_LEFT_A_Pin|MOTOR_LEFT_B_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b9a:	4822      	ldr	r0, [pc, #136]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000b9c:	f001 fcba 	bl	8002514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481a      	ldr	r0, [pc, #104]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000bb8:	f001 fb02 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd6:	f001 faf3 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_RIGHT_B_Pin|MOTOR_RIGHT_A_Pin;
 8000bda:	2360      	movs	r3, #96	; 0x60
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <MX_GPIO_Init+0x118>)
 8000bf2:	f001 fae5 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MOTOR_LEFT_A_Pin|MOTOR_LEFT_B_Pin;
 8000bf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_GPIO_Init+0x11c>)
 8000c10:	f001 fad6 	bl	80021c0 <HAL_GPIO_Init>

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000800 	.word	0x48000800
 8000c24:	48000400 	.word	0x48000400

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 fe9f 	bl	8001970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f873 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f7ff ff67 	bl	8000b08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3a:	f7ff ff47 	bl	8000acc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c3e:	f000 fd93 	bl	8001768 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c42:	f000 fd61 	bl	8001708 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000c46:	f000 fca1 	bl	800158c <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  SSL482_Init(&ssl482, &huart1);
 8000c4a:	492c      	ldr	r1, [pc, #176]	; (8000cfc <main+0xd4>)
 8000c4c:	482c      	ldr	r0, [pc, #176]	; (8000d00 <main+0xd8>)
 8000c4e:	f000 fa00 	bl	8001052 <SSL482_Init>
  Motor_Init(&motor_l, &htim3, TIM_CHANNEL_3, MOTOR_LEFT_A_GPIO_Port, MOTOR_LEFT_A_Pin, MOTOR_LEFT_B_GPIO_Port, MOTOR_LEFT_B_Pin);
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <main+0xdc>)
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <main+0xdc>)
 8000c64:	2208      	movs	r2, #8
 8000c66:	4928      	ldr	r1, [pc, #160]	; (8000d08 <main+0xe0>)
 8000c68:	4828      	ldr	r0, [pc, #160]	; (8000d0c <main+0xe4>)
 8000c6a:	f000 f8e8 	bl	8000e3e <Motor_Init>
  Motor_Init(&motor_r, &htim3, TIM_CHANNEL_4, MOTOR_RIGHT_A_GPIO_Port, MOTOR_RIGHT_A_Pin, MOTOR_RIGHT_B_GPIO_Port, MOTOR_RIGHT_B_Pin);
 8000c6e:	2320      	movs	r3, #32
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <main+0xe8>)
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <main+0xe8>)
 8000c7c:	220c      	movs	r2, #12
 8000c7e:	4922      	ldr	r1, [pc, #136]	; (8000d08 <main+0xe0>)
 8000c80:	4824      	ldr	r0, [pc, #144]	; (8000d14 <main+0xec>)
 8000c82:	f000 f8dc 	bl	8000e3e <Motor_Init>

  Motor_SetCompare(&motor_r, 65535);
 8000c86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c8a:	4822      	ldr	r0, [pc, #136]	; (8000d14 <main+0xec>)
 8000c8c:	f000 f996 	bl	8000fbc <Motor_SetCompare>

  while(1) {

	  if(SSL482_GetStatus(&ssl482)==SSL482_OK) {
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <main+0xd8>)
 8000c92:	f000 faa7 	bl	80011e4 <SSL482_GetStatus>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d123      	bne.n	8000ce4 <main+0xbc>
		  // remote
		  float power_l = (ssl482.throttle - ssl482.steering);
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <main+0xd8>)
 8000c9e:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <main+0xd8>)
 8000ca4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cac:	edc7 7a01 	vstr	s15, [r7, #4]
		  float power_r = -(ssl482.throttle + ssl482.steering);
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <main+0xd8>)
 8000cb2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <main+0xd8>)
 8000cb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8000cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc0:	eef1 7a67 	vneg.f32	s15, s15
 8000cc4:	edc7 7a00 	vstr	s15, [r7]

		  Motor_SetSpeed(&motor_l, power_l);
 8000cc8:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <main+0xe4>)
 8000cce:	f000 f8e2 	bl	8000e96 <Motor_SetSpeed>
		  Motor_SetSpeed(&motor_r, power_r);
 8000cd2:	ed97 0a00 	vldr	s0, [r7]
 8000cd6:	480f      	ldr	r0, [pc, #60]	; (8000d14 <main+0xec>)
 8000cd8:	f000 f8dd 	bl	8000e96 <Motor_SetSpeed>

		  //Motor_SetCompare(&motor_l, motor_l.compare + 1);
		  //Motor_SetCompare(&motor_r, motor_r.compare - 1);

		  HAL_Delay(10);
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f000 fec3 	bl	8001a68 <HAL_Delay>
 8000ce2:	e7d5      	b.n	8000c90 <main+0x68>

	  } else {
		  // disconnect

		  Motor_SetSpeed(&motor_l, 0);
 8000ce4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000d18 <main+0xf0>
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <main+0xe4>)
 8000cea:	f000 f8d4 	bl	8000e96 <Motor_SetSpeed>
		  Motor_SetSpeed(&motor_r, 0);
 8000cee:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000d18 <main+0xf0>
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <main+0xec>)
 8000cf4:	f000 f8cf 	bl	8000e96 <Motor_SetSpeed>
	  if(SSL482_GetStatus(&ssl482)==SSL482_OK) {
 8000cf8:	e7ca      	b.n	8000c90 <main+0x68>
 8000cfa:	bf00      	nop
 8000cfc:	20000134 	.word	0x20000134
 8000d00:	20000060 	.word	0x20000060
 8000d04:	48000400 	.word	0x48000400
 8000d08:	200000a0 	.word	0x200000a0
 8000d0c:	20000044 	.word	0x20000044
 8000d10:	48000800 	.word	0x48000800
 8000d14:	20000028 	.word	0x20000028
 8000d18:	00000000 	.word	0x00000000

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0b8      	sub	sp, #224	; 0xe0
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 f828 	bl	8005d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2288      	movs	r2, #136	; 0x88
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 f81a 	bl	8005d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d72:	230a      	movs	r3, #10
 8000d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fc3c 	bl	800260c <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d9a:	f000 f84b 	bl	8000e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f808 	bl	8002dd8 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dce:	f000 f831 	bl	8000e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dde:	463b      	mov	r3, r7
 8000de0:	4618      	mov	r0, r3
 8000de2:	f002 f9ff 	bl	80031e4 <HAL_RCCEx_PeriphCLKConfig>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000dec:	f000 f822 	bl	8000e34 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000df0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000df4:	f001 fbb4 	bl	8002560 <HAL_PWREx_ControlVoltageScaling>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000dfe:	f000 f819 	bl	8000e34 <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	37e0      	adds	r7, #224	; 0xe0
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(huart->Instance==ssl482.huart->Instance) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_UART_RxCpltCallback+0x24>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d102      	bne.n	8000e28 <HAL_UART_RxCpltCallback+0x1c>
		SSL482_OnRecive(&ssl482);
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <HAL_UART_RxCpltCallback+0x24>)
 8000e24:	f000 f93e 	bl	80010a4 <SSL482_OnRecive>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000060 	.word	0x20000060

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <Error_Handler+0x8>

08000e3e <Motor_Init>:
 *      Author: ermoz
 */

#include "motor.h"

void Motor_Init(Motor *motor, TIM_HandleTypeDef *htim, uint32_t channel, GPIO_TypeDef *engA_port, uint16_t engA_pin, GPIO_TypeDef *engB_port, uint16_t engB_pin) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	603b      	str	r3, [r7, #0]
	motor->htim = htim;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	601a      	str	r2, [r3, #0]
	motor->channel = channel;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	605a      	str	r2, [r3, #4]
	motor->engA_port = engA_port;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	609a      	str	r2, [r3, #8]
	motor->engA_pin = engA_pin;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	8b3a      	ldrh	r2, [r7, #24]
 8000e62:	821a      	strh	r2, [r3, #16]
	motor->engB_port = engB_port;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	60da      	str	r2, [r3, #12]
	motor->engB_pin = engB_pin;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	8c3a      	ldrh	r2, [r7, #32]
 8000e6e:	825a      	strh	r2, [r3, #18]

	motor->speed = 0;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	615a      	str	r2, [r3, #20]
	motor->compare = 0;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]

	HAL_TIM_PWM_Start(motor->htim, motor->channel);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4610      	mov	r0, r2
 8000e8a:	f002 febf 	bl	8003c0c <HAL_TIM_PWM_Start>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <Motor_SetSpeed>:

// speed in range [-1; 1]
void Motor_SetSpeed(Motor *motor, float speed) {
 8000e96:	b5b0      	push	{r4, r5, r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	ed87 0a00 	vstr	s0, [r7]
	motor->speed = speed;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	615a      	str	r2, [r3, #20]

	if(motor->speed>0) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	dd10      	ble.n	8000eda <Motor_SetSpeed+0x44>
		HAL_GPIO_WritePin(motor->engA_port, motor->engA_pin, GPIO_PIN_SET);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6898      	ldr	r0, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	8a1b      	ldrh	r3, [r3, #16]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f001 fb26 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->engB_port, motor->engB_pin, GPIO_PIN_RESET);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68d8      	ldr	r0, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	8a5b      	ldrh	r3, [r3, #18]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f001 fb1e 	bl	8002514 <HAL_GPIO_WritePin>
 8000ed8:	e00f      	b.n	8000efa <Motor_SetSpeed+0x64>
	} else {
		HAL_GPIO_WritePin(motor->engA_port, motor->engA_pin, GPIO_PIN_RESET);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6898      	ldr	r0, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	8a1b      	ldrh	r3, [r3, #16]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f001 fb15 	bl	8002514 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->engB_port, motor->engB_pin, GPIO_PIN_SET);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68d8      	ldr	r0, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	8a5b      	ldrh	r3, [r3, #18]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f001 fb0d 	bl	8002514 <HAL_GPIO_WritePin>
	}

	motor->compare = fabs(speed)*__HAL_TIM_GET_AUTORELOAD(motor->htim);
 8000efa:	edd7 7a00 	vldr	s15, [r7]
 8000efe:	eef0 7ae7 	vabs.f32	s15, s15
 8000f02:	ee17 0a90 	vmov	r0, s15
 8000f06:	f7ff fbed 	bl	80006e4 <__aeabi_f2d>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fbc2 	bl	80006a0 <__aeabi_ui2d>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4620      	mov	r0, r4
 8000f22:	4629      	mov	r1, r5
 8000f24:	f7ff f950 	bl	80001c8 <__aeabi_dmul>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff fc30 	bl	8000794 <__aeabi_d2uiz>
 8000f34:	4602      	mov	r2, r0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	619a      	str	r2, [r3, #24]

	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d106      	bne.n	8000f50 <Motor_SetSpeed+0xba>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6992      	ldr	r2, [r2, #24]
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f4e:	e031      	b.n	8000fb4 <Motor_SetSpeed+0x11e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d106      	bne.n	8000f66 <Motor_SetSpeed+0xd0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f64:	e026      	b.n	8000fb4 <Motor_SetSpeed+0x11e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d106      	bne.n	8000f7c <Motor_SetSpeed+0xe6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f7a:	e01b      	b.n	8000fb4 <Motor_SetSpeed+0x11e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d106      	bne.n	8000f92 <Motor_SetSpeed+0xfc>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f90:	e010      	b.n	8000fb4 <Motor_SetSpeed+0x11e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d106      	bne.n	8000fa8 <Motor_SetSpeed+0x112>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000fa6:	e005      	b.n	8000fb4 <Motor_SetSpeed+0x11e>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}

08000fbc <Motor_SetCompare>:

void Motor_SetCompare(Motor *motor, uint32_t compare) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	motor->compare = compare;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	619a      	str	r2, [r3, #24]

	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d106      	bne.n	8000fe2 <Motor_SetCompare+0x26>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6992      	ldr	r2, [r2, #24]
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fe0:	e031      	b.n	8001046 <Motor_SetCompare+0x8a>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d106      	bne.n	8000ff8 <Motor_SetCompare+0x3c>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ff6:	e026      	b.n	8001046 <Motor_SetCompare+0x8a>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d106      	bne.n	800100e <Motor_SetCompare+0x52>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800100c:	e01b      	b.n	8001046 <Motor_SetCompare+0x8a>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b0c      	cmp	r3, #12
 8001014:	d106      	bne.n	8001024 <Motor_SetCompare+0x68>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001022:	e010      	b.n	8001046 <Motor_SetCompare+0x8a>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b10      	cmp	r3, #16
 800102a:	d106      	bne.n	800103a <Motor_SetCompare+0x7e>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001038:	e005      	b.n	8001046 <Motor_SetCompare+0x8a>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->channel, motor->compare);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <SSL482_Init>:
 * @brief Initialization of RC struct.
 * @details Must be call at the begin of the program.
 * @param rc pointer to target board
 * @param huart pointer to UART HAL handle, that will be in use
 * */
void SSL482_Init(SSL482_StructTypeDef *rc, UART_HandleTypeDef *huart) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
	rc->huart = huart;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	601a      	str	r2, [r3, #0]
	rc->dataTimestamp = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
	rc->status = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	rc->steering = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	; 0x34
	rc->throttle = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
	rc->aux1 = SSL482_SW1_UNKNOW;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	879a      	strh	r2, [r3, #60]	; 0x3c
	rc->aux2 = SSL482_SW3_UNKNOW;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	87da      	strh	r2, [r3, #62]	; 0x3e

	// start DMA receiver
	HAL_UART_Receive_DMA(rc->huart, rc->bufferRead, SSL482_BUFFER_READ_LEN);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3304      	adds	r3, #4
 8001094:	2214      	movs	r2, #20
 8001096:	4619      	mov	r1, r3
 8001098:	f003 fc3e 	bl	8004918 <HAL_UART_Receive_DMA>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SSL482_OnRecive>:
/**
 * @brief ReadBuffer full callback.
 * @details Made for call in HAL_UART_RxCpltCallback() interrupt callback.
 * @param rc pointer to target receiver
 * */
void SSL482_OnRecive(SSL482_StructTypeDef *rc) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	rc->status = SSL482_OK;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	uint8_t loop = SSL482_BUFFER_READ_LEN - SSL482_BUFFER_FRAME_LEN;
 80010b4:	230a      	movs	r3, #10
 80010b6:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73bb      	strb	r3, [r7, #14]

	// search for valid frame in read buffer
	memcpy(rc->bufferFrame, rc->bufferRead, SSL482_BUFFER_FRAME_LEN);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f103 0018 	add.w	r0, r3, #24
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3304      	adds	r3, #4
 80010c6:	220a      	movs	r2, #10
 80010c8:	4619      	mov	r1, r3
 80010ca:	f004 fe4b 	bl	8005d64 <memcpy>

	while(!__SSL482_GetFrameCheckum(rc->bufferFrame) && loop--) {
 80010ce:	e00d      	b.n	80010ec <SSL482_OnRecive+0x48>
		index++;
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	3301      	adds	r3, #1
 80010d4:	73bb      	strb	r3, [r7, #14]
		memcpy(rc->bufferFrame, rc->bufferRead + index, SSL482_BUFFER_FRAME_LEN);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f103 0018 	add.w	r0, r3, #24
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	4413      	add	r3, r2
 80010e4:	220a      	movs	r2, #10
 80010e6:	4619      	mov	r1, r3
 80010e8:	f004 fe3c 	bl	8005d64 <memcpy>
	while(!__SSL482_GetFrameCheckum(rc->bufferFrame) && loop--) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3318      	adds	r3, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f9b2 	bl	800145a <__SSL482_GetFrameCheckum>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <SSL482_OnRecive+0x62>
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	73fa      	strb	r2, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1e4      	bne.n	80010d0 <SSL482_OnRecive+0x2c>
	}

	// restart DMA receiver
	HAL_UART_Receive_DMA(rc->huart, rc->bufferRead, SSL482_BUFFER_READ_LEN);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	2214      	movs	r2, #20
 8001110:	4619      	mov	r1, r3
 8001112:	f003 fc01 	bl	8004918 <HAL_UART_Receive_DMA>

	// can't find any valid frame (transmission error)
	if(loop==0) {
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d104      	bne.n	8001126 <SSL482_OnRecive+0x82>
		rc->status = SSL482_TRANSMISSION_ERROR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		return;
 8001124:	e05b      	b.n	80011de <SSL482_OnRecive+0x13a>
	}

	// read raw data from frame and save time
	rc->dataRaw[0] = (rc->bufferFrame[1] << 8) + rc->bufferFrame[2];
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7e5b      	ldrb	r3, [r3, #25]
 800112a:	b29b      	uxth	r3, r3
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7e9b      	ldrb	r3, [r3, #26]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	845a      	strh	r2, [r3, #34]	; 0x22
	rc->dataRaw[1] = (rc->bufferFrame[3] << 8) + rc->bufferFrame[4];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7edb      	ldrb	r3, [r3, #27]
 8001142:	b29b      	uxth	r3, r3
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7f1b      	ldrb	r3, [r3, #28]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	849a      	strh	r2, [r3, #36]	; 0x24
	rc->dataRaw[2] = (rc->bufferFrame[5] << 8) + rc->bufferFrame[6];
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7f5b      	ldrb	r3, [r3, #29]
 800115a:	b29b      	uxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7f9b      	ldrb	r3, [r3, #30]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	84da      	strh	r2, [r3, #38]	; 0x26
	rc->dataRaw[3] = (rc->bufferFrame[7] << 8) + rc->bufferFrame[8];
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	7fdb      	ldrb	r3, [r3, #31]
 8001172:	b29b      	uxth	r3, r3
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b29a      	uxth	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117e:	b29b      	uxth	r3, r3
 8001180:	4413      	add	r3, r2
 8001182:	b29a      	uxth	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	851a      	strh	r2, [r3, #40]	; 0x28
	rc->dataTimestamp = HAL_GetTick();
 8001188:	f000 fc62 	bl	8001a50 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c

	// format data to useful form
	rc->steering = __SSL482_GetProcessedSteering(rc->dataRaw[0]);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f8c0 	bl	800131c <__SSL482_GetProcessedSteering>
 800119c:	eef0 7a40 	vmov.f32	s15, s0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	rc->throttle = __SSL482_GetProcessedThrottle(rc->dataRaw[1]);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f84c 	bl	8001248 <__SSL482_GetProcessedThrottle>
 80011b0:	eef0 7a40 	vmov.f32	s15, s0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	rc->aux1 = __SSL482_GetProcessedAUX1(rc->dataRaw[2]);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f916 	bl	80013f0 <__SSL482_GetProcessedAUX1>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	879a      	strh	r2, [r3, #60]	; 0x3c
	rc->aux2 = __SSL482_GetProcessedAUX2(rc->dataRaw[3]);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f924 	bl	800141e <__SSL482_GetProcessedAUX2>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <SSL482_GetStatus>:
/**
 * @brief Get connection status.
 * @param rc pointer to target receiver
 * @return status byte, each bit corresponds to other issue
 * */
SSL482Error_EnumTypeDef SSL482_GetStatus(SSL482_StructTypeDef *rc) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

	if((HAL_GetTick() - rc->dataTimestamp)>SSL482_MESSAGE_TIMEOUT)
 80011ec:	f000 fc30 	bl	8001a50 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2bc8      	cmp	r3, #200	; 0xc8
 80011fa:	d904      	bls.n	8001206 <SSL482_GetStatus+0x22>
		rc->status = SSL482_TRANSMISSION_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001204:	e019      	b.n	800123a <SSL482_GetStatus+0x56>
	else if(rc->status>0)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <SSL482_GetStatus+0x36>
		rc->status = SSL482_TRANSMISSION_ERROR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001218:	e00f      	b.n	800123a <SSL482_GetStatus+0x56>
	else if(rc->dataRaw[0]>SSL482_STEERING_CUTOFF || rc->dataRaw[1]>SSL482_THROTTLE_CUTOFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800121e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001222:	4293      	cmp	r3, r2
 8001224:	d805      	bhi.n	8001232 <SSL482_GetStatus+0x4e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800122a:	f240 6272 	movw	r2, #1650	; 0x672
 800122e:	4293      	cmp	r3, r2
 8001230:	d903      	bls.n	800123a <SSL482_GetStatus+0x56>
		rc->status = SSL482_VALUE_OUT_OF_RANGE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	return rc->status;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <__SSL482_GetProcessedThrottle>:
 * @brief Format throttle value to usable form.
 * @detail inactive zone around neutral value is considered
 * @param throttleRaw raw steering value
 * @return floating point value from range [-1; 1]
 * */
float __SSL482_GetProcessedThrottle(uint16_t throttleRaw) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	if(throttleRaw==0 || throttleRaw>SSL482_THROTTLE_CUTOFF)
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <__SSL482_GetProcessedThrottle+0x1a>
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	f240 6272 	movw	r2, #1650	; 0x672
 800125e:	4293      	cmp	r3, r2
 8001260:	d902      	bls.n	8001268 <__SSL482_GetProcessedThrottle+0x20>
		return 0;
 8001262:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001304 <__SSL482_GetProcessedThrottle+0xbc>
 8001266:	e048      	b.n	80012fa <__SSL482_GetProcessedThrottle+0xb2>

	float raw = (float)throttleRaw - SSL482_THROTTLE_NEUTRAL_VALUE;
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001272:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001308 <__SSL482_GetProcessedThrottle+0xc0>
 8001276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800127a:	edc7 7a02 	vstr	s15, [r7, #8]
	float result = 0;
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

	if(raw>SSL482_THROTTLE_NEUTRAL_RADIUS)
 8001284:	edd7 7a02 	vldr	s15, [r7, #8]
 8001288:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800130c <__SSL482_GetProcessedThrottle+0xc4>
 800128c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	dd0c      	ble.n	80012b0 <__SSL482_GetProcessedThrottle+0x68>
		result = (raw - SSL482_THROTTLE_NEUTRAL_RADIUS)/(SSL482_THROTTLE_MAX_VALUE - SSL482_THROTTLE_NEUTRAL_VALUE - SSL482_THROTTLE_NEUTRAL_RADIUS);
 8001296:	edd7 7a02 	vldr	s15, [r7, #8]
 800129a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800130c <__SSL482_GetProcessedThrottle+0xc4>
 800129e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012a2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001310 <__SSL482_GetProcessedThrottle+0xc8>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	edc7 7a03 	vstr	s15, [r7, #12]
 80012ae:	e014      	b.n	80012da <__SSL482_GetProcessedThrottle+0x92>
	else if(raw<-SSL482_THROTTLE_NEUTRAL_RADIUS)
 80012b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012b4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001314 <__SSL482_GetProcessedThrottle+0xcc>
 80012b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	d50b      	bpl.n	80012da <__SSL482_GetProcessedThrottle+0x92>
		result = -(raw + SSL482_THROTTLE_NEUTRAL_RADIUS)/(SSL482_THROTTLE_MIN_VALUE - SSL482_THROTTLE_NEUTRAL_VALUE + SSL482_THROTTLE_NEUTRAL_RADIUS);
 80012c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800130c <__SSL482_GetProcessedThrottle+0xc4>
 80012ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012ce:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001318 <__SSL482_GetProcessedThrottle+0xd0>
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	edc7 7a03 	vstr	s15, [r7, #12]

	return fminf(fmaxf(result, -1), 1);
 80012da:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80012de:	ed97 0a03 	vldr	s0, [r7, #12]
 80012e2:	f004 fd55 	bl	8005d90 <fmaxf>
 80012e6:	eef0 7a40 	vmov.f32	s15, s0
 80012ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80012ee:	eeb0 0a67 	vmov.f32	s0, s15
 80012f2:	f004 fd68 	bl	8005dc6 <fminf>
 80012f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	00000000 	.word	0x00000000
 8001308:	443b4000 	.word	0x443b4000
 800130c:	42480000 	.word	0x42480000
 8001310:	44428000 	.word	0x44428000
 8001314:	c2480000 	.word	0xc2480000
 8001318:	43db0000 	.word	0x43db0000

0800131c <__SSL482_GetProcessedSteering>:
 * @brief Format steering value to usable form.
 * @detail inactive zone around neutral value is considered
 * @param steeringRaw raw steering value
 * @return floating point value from range [-1; 1]
 * */
float __SSL482_GetProcessedSteering(uint16_t steeringRaw) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
	if(steeringRaw==0 || steeringRaw>SSL482_STEERING_CUTOFF)
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d004      	beq.n	8001336 <__SSL482_GetProcessedSteering+0x1a>
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8001332:	4293      	cmp	r3, r2
 8001334:	d902      	bls.n	800133c <__SSL482_GetProcessedSteering+0x20>
		return 0;
 8001336:	eddf 7a28 	vldr	s15, [pc, #160]	; 80013d8 <__SSL482_GetProcessedSteering+0xbc>
 800133a:	e048      	b.n	80013ce <__SSL482_GetProcessedSteering+0xb2>

	float raw = (float)steeringRaw - SSL482_STEERING_NEUTRAL_VALUE;
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001346:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80013dc <__SSL482_GetProcessedSteering+0xc0>
 800134a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800134e:	edc7 7a02 	vstr	s15, [r7, #8]
	float result = 0;
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]

	if(raw>SSL482_STEERING_NEUTRAL_RADIUS)
 8001358:	edd7 7a02 	vldr	s15, [r7, #8]
 800135c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80013e0 <__SSL482_GetProcessedSteering+0xc4>
 8001360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	dd0c      	ble.n	8001384 <__SSL482_GetProcessedSteering+0x68>
		result =  (raw - SSL482_STEERING_NEUTRAL_RADIUS)/(SSL482_STEERING_MAX_VALUE - SSL482_STEERING_NEUTRAL_VALUE - SSL482_STEERING_NEUTRAL_RADIUS);
 800136a:	edd7 7a02 	vldr	s15, [r7, #8]
 800136e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80013e0 <__SSL482_GetProcessedSteering+0xc4>
 8001372:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001376:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80013e4 <__SSL482_GetProcessedSteering+0xc8>
 800137a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001382:	e014      	b.n	80013ae <__SSL482_GetProcessedSteering+0x92>
	else if(raw<-SSL482_STEERING_NEUTRAL_RADIUS)
 8001384:	edd7 7a02 	vldr	s15, [r7, #8]
 8001388:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013e8 <__SSL482_GetProcessedSteering+0xcc>
 800138c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d50b      	bpl.n	80013ae <__SSL482_GetProcessedSteering+0x92>
		result =  -(raw + SSL482_STEERING_NEUTRAL_RADIUS)/(SSL482_STEERING_MIN_VALUE - SSL482_STEERING_NEUTRAL_VALUE + SSL482_STEERING_NEUTRAL_RADIUS);
 8001396:	edd7 7a02 	vldr	s15, [r7, #8]
 800139a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013e0 <__SSL482_GetProcessedSteering+0xc4>
 800139e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80013a2:	eddf 6a12 	vldr	s13, [pc, #72]	; 80013ec <__SSL482_GetProcessedSteering+0xd0>
 80013a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013aa:	edc7 7a03 	vstr	s15, [r7, #12]

	return fminf(fmaxf(result, -1), 1);
 80013ae:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80013b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80013b6:	f004 fceb 	bl	8005d90 <fmaxf>
 80013ba:	eef0 7a40 	vmov.f32	s15, s0
 80013be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80013c2:	eeb0 0a67 	vmov.f32	s0, s15
 80013c6:	f004 fcfe 	bl	8005dc6 <fminf>
 80013ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	00000000 	.word	0x00000000
 80013dc:	44808000 	.word	0x44808000
 80013e0:	42480000 	.word	0x42480000
 80013e4:	4418c000 	.word	0x4418c000
 80013e8:	c2480000 	.word	0xc2480000
 80013ec:	441b8000 	.word	0x441b8000

080013f0 <__SSL482_GetProcessedAUX1>:
/**
 * @brief Format AUX1 value to usable form.
 * @param aux1Raw raw AUX1 value
 * @return AUX1 state
 * */
SW1_State_EnumTypeDef __SSL482_GetProcessedAUX1(uint16_t aux1Raw) {
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
	switch(aux1Raw) {
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	f240 1257 	movw	r2, #343	; 0x157
 8001400:	4293      	cmp	r3, r2
 8001402:	d003      	beq.n	800140c <__SSL482_GetProcessedAUX1+0x1c>
 8001404:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <__SSL482_GetProcessedAUX1+0x20>
		case SSL482_SW1_PRESSED:
		case SSL482_SW1_RELESSED:
			return aux1Raw;
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	e000      	b.n	8001412 <__SSL482_GetProcessedAUX1+0x22>
	}

	return SSL482_SW1_UNKNOW;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <__SSL482_GetProcessedAUX2>:
/**
 * @brief Format AUX2 value to usable form.
 * @param aux2Raw raw AUX2 value
 * @return AUX2 state
 * */
SW3_State_EnumTypeDef __SSL482_GetProcessedAUX2(uint16_t aux2Raw) {
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	80fb      	strh	r3, [r7, #6]
	switch(aux2Raw) {
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	f240 62a7 	movw	r2, #1703	; 0x6a7
 800142e:	4293      	cmp	r3, r2
 8001430:	d00a      	beq.n	8001448 <__SSL482_GetProcessedAUX2+0x2a>
 8001432:	f5b3 6fd5 	cmp.w	r3, #1704	; 0x6a8
 8001436:	da09      	bge.n	800144c <__SSL482_GetProcessedAUX2+0x2e>
 8001438:	f240 1257 	movw	r2, #343	; 0x157
 800143c:	4293      	cmp	r3, r2
 800143e:	d003      	beq.n	8001448 <__SSL482_GetProcessedAUX2+0x2a>
 8001440:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001444:	4293      	cmp	r3, r2
 8001446:	d101      	bne.n	800144c <__SSL482_GetProcessedAUX2+0x2e>
		case SSL482_SW3_POSITION_1:
		case SSL482_SW3_POSITION_2:
		case SSL482_SW3_POSITION_3:
			return aux2Raw;
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	e000      	b.n	800144e <__SSL482_GetProcessedAUX2+0x30>
	}

	return SSL482_SW3_UNKNOW;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <__SSL482_GetFrameCheckum>:
/**
 * @brief Check if frame is valid.
 * @param buffer RC frame
 * @return 1 if frame is valid, 0 if not
 * */
uint8_t __SSL482_GetFrameCheckum(uint8_t* buffer) {
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	uint8_t controlSum = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i=0; i<9; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	e009      	b.n	8001480 <__SSL482_GetFrameCheckum+0x26>
		controlSum +=buffer[i];
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	4413      	add	r3, r2
 8001478:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<9; i++)
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	3301      	adds	r3, #1
 800147e:	73bb      	strb	r3, [r7, #14]
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d9f2      	bls.n	800146c <__SSL482_GetFrameCheckum+0x12>

	return (controlSum==buffer[9]);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3309      	adds	r3, #9
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	429a      	cmp	r2, r3
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_MspInit+0x44>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_MspInit+0x44>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6613      	str	r3, [r2, #96]	; 0x60
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_MspInit+0x44>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x44>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x44>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x44>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 fa76 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <DMA1_Channel5_IRQHandler+0x10>)
 8001546:	f000 fd5c 	bl	8002002 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200000ec 	.word	0x200000ec

08001554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART1_IRQHandler+0x10>)
 800155a:	f003 fa33 	bl	80049c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000134 	.word	0x20000134

08001568 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <MX_TIM3_Init+0xc8>)
 80015b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015d6:	481e      	ldr	r0, [pc, #120]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015d8:	f002 fac0 	bl	8003b5c <HAL_TIM_PWM_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80015e2:	f7ff fc27 	bl	8000e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4816      	ldr	r0, [pc, #88]	; (8001650 <MX_TIM3_Init+0xc4>)
 80015f6:	f003 f8b9 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001600:	f7ff fc18 	bl	8000e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001604:	2360      	movs	r3, #96	; 0x60
 8001606:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	2208      	movs	r2, #8
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_TIM3_Init+0xc4>)
 800161c:	f002 fbfc 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001626:	f7ff fc05 	bl	8000e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	220c      	movs	r2, #12
 800162e:	4619      	mov	r1, r3
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM3_Init+0xc4>)
 8001632:	f002 fbf1 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800163c:	f7ff fbfa 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM3_Init+0xc4>)
 8001642:	f000 f829 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200000a0 	.word	0x200000a0
 8001654:	40000400 	.word	0x40000400

08001658 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_TIM_PWM_MspInit+0x38>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10b      	bne.n	8001682 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_TIM_PWM_MspInit+0x3c>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_TIM_PWM_MspInit+0x3c>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <HAL_TIM_PWM_MspInit+0x3c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40000400 	.word	0x40000400
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x64>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d11c      	bne.n	80016f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_TIM_MspPostInit+0x6c>)
 80016f0:	f000 fd66 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40000400 	.word	0x40000400
 8001700:	40021000 	.word	0x40021000
 8001704:	48000800 	.word	0x48000800

08001708 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_USART1_UART_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <MX_USART1_UART_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_USART1_UART_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_USART1_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_USART1_UART_Init+0x58>)
 800174c:	f003 f896 	bl	800487c <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001756:	f7ff fb6d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000134 	.word	0x20000134
 8001764:	40013800 	.word	0x40013800

08001768 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_USART2_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART2_UART_Init+0x58>)
 80017ac:	f003 f866 	bl	800487c <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f7ff fb3d 	bl	8000e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001b8 	.word	0x200001b8
 80017c4:	40004400 	.word	0x40004400

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_UART_MspInit+0x140>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d15b      	bne.n	80018a2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ea:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_UART_MspInit+0x144>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ee:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_UART_MspInit+0x144>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6613      	str	r3, [r2, #96]	; 0x60
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_UART_MspInit+0x144>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001802:	4b42      	ldr	r3, [pc, #264]	; (800190c <HAL_UART_MspInit+0x144>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a41      	ldr	r2, [pc, #260]	; (800190c <HAL_UART_MspInit+0x144>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_UART_MspInit+0x144>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800181a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182c:	2307      	movs	r3, #7
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 fcc1 	bl	80021c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001840:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_UART_MspInit+0x14c>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001846:	2202      	movs	r2, #2
 8001848:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_UART_MspInit+0x148>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_UART_MspInit+0x148>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_UART_MspInit+0x148>)
 800186a:	2220      	movs	r2, #32
 800186c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001874:	4826      	ldr	r0, [pc, #152]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001876:	f000 fa2d 	bl	8001cd4 <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 8001880:	f7ff fad8 	bl	8000e34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <HAL_UART_MspInit+0x148>)
 8001888:	671a      	str	r2, [r3, #112]	; 0x70
 800188a:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_UART_MspInit+0x148>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2025      	movs	r0, #37	; 0x25
 8001896:	f000 f9e6 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800189a:	2025      	movs	r0, #37	; 0x25
 800189c:	f000 f9ff 	bl	8001c9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a0:	e02d      	b.n	80018fe <HAL_UART_MspInit+0x136>
  else if(uartHandle->Instance==USART2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_UART_MspInit+0x150>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d128      	bne.n	80018fe <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_UART_MspInit+0x144>)
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	4a16      	ldr	r2, [pc, #88]	; (800190c <HAL_UART_MspInit+0x144>)
 80018b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b6:	6593      	str	r3, [r2, #88]	; 0x58
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_UART_MspInit+0x144>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_UART_MspInit+0x144>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_UART_MspInit+0x144>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_UART_MspInit+0x144>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018dc:	230c      	movs	r3, #12
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ec:	2307      	movs	r3, #7
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f000 fc61 	bl	80021c0 <HAL_GPIO_Init>
}
 80018fe:	bf00      	nop
 8001900:	3730      	adds	r7, #48	; 0x30
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40013800 	.word	0x40013800
 800190c:	40021000 	.word	0x40021000
 8001910:	200000ec 	.word	0x200000ec
 8001914:	40020058 	.word	0x40020058
 8001918:	40004400 	.word	0x40004400

0800191c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800191c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001954 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001920:	f7ff fe22 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001926:	490d      	ldr	r1, [pc, #52]	; (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <LoopForever+0xe>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800193c:	4c0a      	ldr	r4, [pc, #40]	; (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800194a:	f004 f9e7 	bl	8005d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194e:	f7ff f96b 	bl	8000c28 <main>

08001952 <LoopForever>:

LoopForever:
    b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001954:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001960:	08005ea4 	.word	0x08005ea4
  ldr r2, =_sbss
 8001964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001968:	20000240 	.word	0x20000240

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>
	...

08001970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_Init+0x3c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_Init+0x3c>)
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f962 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198c:	2000      	movs	r0, #0
 800198e:	f000 f80f 	bl	80019b0 <HAL_InitTick>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	71fb      	strb	r3, [r7, #7]
 800199c:	e001      	b.n	80019a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800199e:	f7ff fd81 	bl	80014a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40022000 	.word	0x40022000

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_InitTick+0x6c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d023      	beq.n	8001a0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_InitTick+0x70>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_InitTick+0x6c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f96d 	bl	8001cba <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d809      	bhi.n	8001a00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f4:	f000 f937 	bl	8001c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_InitTick+0x74>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e007      	b.n	8001a10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e004      	b.n	8001a10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	e001      	b.n	8001a10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000023c 	.word	0x2000023c

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	2000023c 	.word	0x2000023c

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_Delay+0x44>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	db0a      	blt.n	8001b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	490c      	ldr	r1, [pc, #48]	; (8001b9c <__NVIC_SetPriority+0x4c>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	440b      	add	r3, r1
 8001b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b78:	e00a      	b.n	8001b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4908      	ldr	r1, [pc, #32]	; (8001ba0 <__NVIC_SetPriority+0x50>)
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	3b04      	subs	r3, #4
 8001b88:	0112      	lsls	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	761a      	strb	r2, [r3, #24]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000e100 	.word	0xe000e100
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f1c3 0307 	rsb	r3, r3, #7
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	bf28      	it	cs
 8001bc2:	2304      	movcs	r3, #4
 8001bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d902      	bls.n	8001bd4 <NVIC_EncodePriority+0x30>
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3b03      	subs	r3, #3
 8001bd2:	e000      	b.n	8001bd6 <NVIC_EncodePriority+0x32>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	401a      	ands	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	4313      	orrs	r3, r2
         );
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3724      	adds	r7, #36	; 0x24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c1c:	d301      	bcc.n	8001c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00f      	b.n	8001c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <SysTick_Config+0x40>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c30:	f7ff ff8e 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <SysTick_Config+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <SysTick_Config+0x40>)
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	e000e010 	.word	0xe000e010

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff29 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff3e 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ff8e 	bl	8001ba4 <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff31 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffa2 	bl	8001c0c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e098      	b.n	8001e18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_DMA_Init+0x150>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d80f      	bhi.n	8001d12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_DMA_Init+0x154>)
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	; (8001e2c <HAL_DMA_Init+0x158>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	009a      	lsls	r2, r3, #2
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_DMA_Init+0x15c>)
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d10:	e00e      	b.n	8001d30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_DMA_Init+0x160>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_DMA_Init+0x158>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <HAL_DMA_Init+0x164>)
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d8a:	d039      	beq.n	8001e00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_DMA_Init+0x15c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11a      	bne.n	8001dcc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d96:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_DMA_Init+0x168>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f003 031c 	and.w	r3, r3, #28
 8001da2:	210f      	movs	r1, #15
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4924      	ldr	r1, [pc, #144]	; (8001e3c <HAL_DMA_Init+0x168>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_DMA_Init+0x168>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbc:	f003 031c 	and.w	r3, r3, #28
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	491d      	ldr	r1, [pc, #116]	; (8001e3c <HAL_DMA_Init+0x168>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
 8001dca:	e019      	b.n	8001e00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_DMA_Init+0x16c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	f003 031c 	and.w	r3, r3, #28
 8001dd8:	210f      	movs	r1, #15
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4917      	ldr	r1, [pc, #92]	; (8001e40 <HAL_DMA_Init+0x16c>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_DMA_Init+0x16c>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 031c 	and.w	r3, r3, #28
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	4911      	ldr	r1, [pc, #68]	; (8001e40 <HAL_DMA_Init+0x16c>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40020407 	.word	0x40020407
 8001e28:	bffdfff8 	.word	0xbffdfff8
 8001e2c:	cccccccd 	.word	0xcccccccd
 8001e30:	40020000 	.word	0x40020000
 8001e34:	bffdfbf8 	.word	0xbffdfbf8
 8001e38:	40020400 	.word	0x40020400
 8001e3c:	400200a8 	.word	0x400200a8
 8001e40:	400204a8 	.word	0x400204a8

08001e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Start_IT+0x20>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e04b      	b.n	8001efc <HAL_DMA_Start_IT+0xb8>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d13a      	bne.n	8001eee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f95f 	bl	8002160 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 020e 	orr.w	r2, r2, #14
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e00f      	b.n	8001edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 020a 	orr.w	r2, r2, #10
 8001eda:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e005      	b.n	8001efa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d008      	beq.n	8001f2e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2204      	movs	r2, #4
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e022      	b.n	8001f74 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020e 	bic.w	r2, r2, #14
 8001f3c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f52:	f003 021c 	and.w	r2, r3, #28
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f60:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d005      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e029      	b.n	8001ff8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 020e 	bic.w	r2, r2, #14
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc8:	f003 021c 	and.w	r2, r3, #28
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
    }
  }
  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f003 031c 	and.w	r3, r3, #28
 8002022:	2204      	movs	r2, #4
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d026      	beq.n	800207c <HAL_DMA_IRQHandler+0x7a>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d021      	beq.n	800207c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d107      	bne.n	8002056 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0204 	bic.w	r2, r2, #4
 8002054:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f003 021c 	and.w	r2, r3, #28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2104      	movs	r1, #4
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	2b00      	cmp	r3, #0
 8002070:	d071      	beq.n	8002156 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800207a:	e06c      	b.n	8002156 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f003 031c 	and.w	r3, r3, #28
 8002084:	2202      	movs	r2, #2
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02e      	beq.n	80020ee <HAL_DMA_IRQHandler+0xec>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d029      	beq.n	80020ee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020a 	bic.w	r2, r2, #10
 80020b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f003 021c 	and.w	r2, r3, #28
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2102      	movs	r1, #2
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d038      	beq.n	8002156 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020ec:	e033      	b.n	8002156 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f003 031c 	and.w	r3, r3, #28
 80020f6:	2208      	movs	r2, #8
 80020f8:	409a      	lsls	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d02a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x156>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d025      	beq.n	8002158 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 020e 	bic.w	r2, r2, #14
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f003 021c 	and.w	r2, r3, #28
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002156:	bf00      	nop
 8002158:	bf00      	nop
}
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f003 021c 	and.w	r2, r3, #28
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d108      	bne.n	80021a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021a2:	e007      	b.n	80021b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ce:	e17f      	b.n	80024d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8171 	beq.w	80024ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d005      	beq.n	8002200 <HAL_GPIO_Init+0x40>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d130      	bne.n	8002262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002236:	2201      	movs	r2, #1
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	091b      	lsrs	r3, r3, #4
 800224c:	f003 0201 	and.w	r2, r3, #1
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b03      	cmp	r3, #3
 800226c:	d118      	bne.n	80022a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	08db      	lsrs	r3, r3, #3
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80ac 	beq.w	80024ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_GPIO_Init+0x330>)
 8002374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002376:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <HAL_GPIO_Init+0x330>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6613      	str	r3, [r2, #96]	; 0x60
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <HAL_GPIO_Init+0x330>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800238a:	4a5a      	ldr	r2, [pc, #360]	; (80024f4 <HAL_GPIO_Init+0x334>)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023b4:	d025      	beq.n	8002402 <HAL_GPIO_Init+0x242>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	; (80024f8 <HAL_GPIO_Init+0x338>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01f      	beq.n	80023fe <HAL_GPIO_Init+0x23e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4e      	ldr	r2, [pc, #312]	; (80024fc <HAL_GPIO_Init+0x33c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d019      	beq.n	80023fa <HAL_GPIO_Init+0x23a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4d      	ldr	r2, [pc, #308]	; (8002500 <HAL_GPIO_Init+0x340>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_GPIO_Init+0x236>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	; (8002504 <HAL_GPIO_Init+0x344>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00d      	beq.n	80023f2 <HAL_GPIO_Init+0x232>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4b      	ldr	r2, [pc, #300]	; (8002508 <HAL_GPIO_Init+0x348>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d007      	beq.n	80023ee <HAL_GPIO_Init+0x22e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4a      	ldr	r2, [pc, #296]	; (800250c <HAL_GPIO_Init+0x34c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <HAL_GPIO_Init+0x22a>
 80023e6:	2306      	movs	r3, #6
 80023e8:	e00c      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e00a      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023ee:	2305      	movs	r3, #5
 80023f0:	e008      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023f2:	2304      	movs	r3, #4
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023f6:	2303      	movs	r3, #3
 80023f8:	e004      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e002      	b.n	8002404 <HAL_GPIO_Init+0x244>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_GPIO_Init+0x244>
 8002402:	2300      	movs	r3, #0
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	f002 0203 	and.w	r2, r2, #3
 800240a:	0092      	lsls	r2, r2, #2
 800240c:	4093      	lsls	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002414:	4937      	ldr	r1, [pc, #220]	; (80024f4 <HAL_GPIO_Init+0x334>)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	089b      	lsrs	r3, r3, #2
 800241a:	3302      	adds	r3, #2
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_GPIO_Init+0x350>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	43db      	mvns	r3, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4013      	ands	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002446:	4a32      	ldr	r2, [pc, #200]	; (8002510 <HAL_GPIO_Init+0x350>)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800244c:	4b30      	ldr	r3, [pc, #192]	; (8002510 <HAL_GPIO_Init+0x350>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002470:	4a27      	ldr	r2, [pc, #156]	; (8002510 <HAL_GPIO_Init+0x350>)
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <HAL_GPIO_Init+0x350>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_GPIO_Init+0x350>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_GPIO_Init+0x350>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c4:	4a12      	ldr	r2, [pc, #72]	; (8002510 <HAL_GPIO_Init+0x350>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f ae78 	bne.w	80021d0 <HAL_GPIO_Init+0x10>
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	48000400 	.word	0x48000400
 80024fc:	48000800 	.word	0x48000800
 8002500:	48000c00 	.word	0x48000c00
 8002504:	48001000 	.word	0x48001000
 8002508:	48001400 	.word	0x48001400
 800250c:	48001800 	.word	0x48001800
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
 8002520:	4613      	mov	r3, r2
 8002522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002524:	787b      	ldrb	r3, [r7, #1]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252a:	887a      	ldrh	r2, [r7, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002530:	e002      	b.n	8002538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_PWREx_GetVoltageRange+0x18>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40007000 	.word	0x40007000

08002560 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256e:	d130      	bne.n	80025d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800257c:	d038      	beq.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800258e:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2232      	movs	r2, #50	; 0x32
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	3301      	adds	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025a4:	e002      	b.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b8:	d102      	bne.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f2      	bne.n	80025a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	d110      	bne.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e00f      	b.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025de:	d007      	beq.n	80025f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025e8:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40007000 	.word	0x40007000
 8002604:	20000000 	.word	0x20000000
 8002608:	431bde83 	.word	0x431bde83

0800260c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e3d4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4ba1      	ldr	r3, [pc, #644]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002628:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80e4 	beq.w	8002808 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_RCC_OscConfig+0x4a>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	f040 808b 	bne.w	8002764 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2b01      	cmp	r3, #1
 8002652:	f040 8087 	bne.w	8002764 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002656:	4b93      	ldr	r3, [pc, #588]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_RCC_OscConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e3ac      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d004      	beq.n	8002688 <HAL_RCC_OscConfig+0x7c>
 800267e:	4b89      	ldr	r3, [pc, #548]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002686:	e005      	b.n	8002694 <HAL_RCC_OscConfig+0x88>
 8002688:	4b86      	ldr	r3, [pc, #536]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	4293      	cmp	r3, r2
 8002696:	d223      	bcs.n	80026e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fd41 	bl	8003124 <RCC_SetFlashLatencyFromMSIRange>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e38d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ac:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a7c      	ldr	r2, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b7a      	ldr	r3, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4977      	ldr	r1, [pc, #476]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	4972      	ldr	r1, [pc, #456]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
 80026de:	e025      	b.n	800272c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e0:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6f      	ldr	r2, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026e6:	f043 0308 	orr.w	r3, r3, #8
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	496a      	ldr	r1, [pc, #424]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	4b69      	ldr	r3, [pc, #420]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4965      	ldr	r1, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d109      	bne.n	800272c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fd01 	bl	8003124 <RCC_SetFlashLatencyFromMSIRange>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e34d      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272c:	f000 fc36 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	495a      	ldr	r1, [pc, #360]	; (80028a8 <HAL_RCC_OscConfig+0x29c>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_OscConfig+0x2a0>)
 800274a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x2a4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff f92d 	bl	80019b0 <HAL_InitTick>
 8002756:	4603      	mov	r3, r0
 8002758:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d052      	beq.n	8002806 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	e331      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d032      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800276c:	4b4d      	ldr	r3, [pc, #308]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4c      	ldr	r2, [pc, #304]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002778:	f7ff f96a 	bl	8001a50 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002780:	f7ff f966 	bl	8001a50 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e31a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a40      	ldr	r2, [pc, #256]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b3e      	ldr	r3, [pc, #248]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	493b      	ldr	r1, [pc, #236]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	4936      	ldr	r1, [pc, #216]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e01a      	b.n	8002808 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a33      	ldr	r2, [pc, #204]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027de:	f7ff f937 	bl	8001a50 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027e6:	f7ff f933 	bl	8001a50 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e2e7      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027f8:	4b2a      	ldr	r3, [pc, #168]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x1da>
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002806:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d074      	beq.n	80028fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x21a>
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d10e      	bne.n	800283e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b03      	cmp	r3, #3
 8002824:	d10b      	bne.n	800283e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d064      	beq.n	80028fc <HAL_RCC_OscConfig+0x2f0>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d160      	bne.n	80028fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e2c4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x24a>
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a15      	ldr	r2, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800284e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	e01d      	b.n	8002892 <HAL_RCC_OscConfig+0x286>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800285e:	d10c      	bne.n	800287a <HAL_RCC_OscConfig+0x26e>
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e00b      	b.n	8002892 <HAL_RCC_OscConfig+0x286>
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <HAL_RCC_OscConfig+0x298>)
 800288c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01c      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f8d9 	bl	8001a50 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a0:	e011      	b.n	80028c6 <HAL_RCC_OscConfig+0x2ba>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08005e4c 	.word	0x08005e4c
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7ff f8cc 	bl	8001a50 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e280      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c6:	4baf      	ldr	r3, [pc, #700]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x2a8>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7ff f8bc 	bl	8001a50 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7ff f8b8 	bl	8001a50 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e26c      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028ee:	4ba5      	ldr	r3, [pc, #660]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x2d0>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d060      	beq.n	80029cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b04      	cmp	r3, #4
 800290e:	d005      	beq.n	800291c <HAL_RCC_OscConfig+0x310>
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d119      	bne.n	800294a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d116      	bne.n	800294a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800291c:	4b99      	ldr	r3, [pc, #612]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_OscConfig+0x328>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e249      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	4b93      	ldr	r3, [pc, #588]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	4990      	ldr	r1, [pc, #576]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002944:	4313      	orrs	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002948:	e040      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d023      	beq.n	800299a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002952:	4b8c      	ldr	r3, [pc, #560]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a8b      	ldr	r2, [pc, #556]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7ff f877 	bl	8001a50 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	e008      	b.n	8002978 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002966:	f7ff f873 	bl	8001a50 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e227      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002978:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0f0      	beq.n	8002966 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b7f      	ldr	r3, [pc, #508]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	497c      	ldr	r1, [pc, #496]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	e018      	b.n	80029cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299a:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a79      	ldr	r2, [pc, #484]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80029a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7ff f853 	bl	8001a50 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ae:	f7ff f84f 	bl	8001a50 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e203      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029c0:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f0      	bne.n	80029ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	4a67      	ldr	r2, [pc, #412]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff f82e 	bl	8001a50 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff f82a 	bl	8001a50 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1de      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ef      	beq.n	80029f8 <HAL_RCC_OscConfig+0x3ec>
 8002a18:	e01b      	b.n	8002a52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b5a      	ldr	r3, [pc, #360]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a20:	4a58      	ldr	r2, [pc, #352]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a22:	f023 0301 	bic.w	r3, r3, #1
 8002a26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7ff f811 	bl	8001a50 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a32:	f7ff f80d 	bl	8001a50 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e1c1      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a44:	4b4f      	ldr	r3, [pc, #316]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ef      	bne.n	8002a32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a6 	beq.w	8002bac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a60:	2300      	movs	r3, #0
 8002a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a64:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a70:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7c:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8c:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_OscConfig+0x57c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d118      	bne.n	8002aca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_OscConfig+0x57c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <HAL_RCC_OscConfig+0x57c>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa4:	f7fe ffd4 	bl	8001a50 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe ffd0 	bl	8001a50 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e184      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abe:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCC_OscConfig+0x57c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4d8>
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	4a2a      	ldr	r2, [pc, #168]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ae2:	e024      	b.n	8002b2e <HAL_RCC_OscConfig+0x522>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d110      	bne.n	8002b0e <HAL_RCC_OscConfig+0x502>
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b0c:	e00f      	b.n	8002b2e <HAL_RCC_OscConfig+0x522>
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe ff8b 	bl	8001a50 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe ff87 	bl	8001a50 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e139      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x578>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ed      	beq.n	8002b3e <HAL_RCC_OscConfig+0x532>
 8002b62:	e01a      	b.n	8002b9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7fe ff74 	bl	8001a50 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b6a:	e00f      	b.n	8002b8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fe ff70 	bl	8001a50 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d906      	bls.n	8002b8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e122      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b8c:	4b90      	ldr	r3, [pc, #576]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1e8      	bne.n	8002b6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b8b      	ldr	r3, [pc, #556]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	4a8a      	ldr	r2, [pc, #552]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8108 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	f040 80d0 	bne.w	8002d60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bc0:	4b83      	ldr	r3, [pc, #524]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0203 	and.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d130      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	3b01      	subs	r3, #1
 8002be0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d127      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d11f      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c00:	2a07      	cmp	r2, #7
 8002c02:	bf14      	ite	ne
 8002c04:	2201      	movne	r2, #1
 8002c06:	2200      	moveq	r2, #0
 8002c08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d113      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d06e      	beq.n	8002d14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b0c      	cmp	r3, #12
 8002c3a:	d069      	beq.n	8002d10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c48:	4b61      	ldr	r3, [pc, #388]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b7      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c58:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c64:	f7fe fef4 	bl	8001a50 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fef0 	bl	8001a50 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0a4      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8a:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCC_OscConfig+0x7c8>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c9a:	3a01      	subs	r2, #1
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca4:	0212      	lsls	r2, r2, #8
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0552      	lsls	r2, r2, #21
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0652      	lsls	r2, r2, #25
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cc4:	0912      	lsrs	r2, r2, #4
 8002cc6:	0452      	lsls	r2, r2, #17
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4941      	ldr	r1, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3e      	ldr	r2, [pc, #248]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ce8:	f7fe feb2 	bl	8001a50 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe feae 	bl	8001a50 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e062      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	4b33      	ldr	r3, [pc, #204]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d0e:	e05a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e059      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d14:	4b2e      	ldr	r3, [pc, #184]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d152      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d2c:	4b28      	ldr	r3, [pc, #160]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d38:	f7fe fe8a 	bl	8001a50 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fe fe86 	bl	8001a50 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e03a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d52:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x734>
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d02d      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d70:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d84:	f023 0303 	bic.w	r3, r3, #3
 8002d88:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d8a:	4b11      	ldr	r3, [pc, #68]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d98:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7fe fe59 	bl	8001a50 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da2:	f7fe fe55 	bl	8001a50 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e009      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db4:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x7c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f0      	bne.n	8002da2 <HAL_RCC_OscConfig+0x796>
 8002dc0:	e001      	b.n	8002dc6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	f99d808c 	.word	0xf99d808c

08002dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0c8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d910      	bls.n	8002e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 0207 	bic.w	r2, r3, #7
 8002e02:	4961      	ldr	r1, [pc, #388]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b5f      	ldr	r3, [pc, #380]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d04c      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b56      	ldr	r3, [pc, #344]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d121      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e09e      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d115      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e092      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e60:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e086      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e70:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e07e      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 0203 	bic.w	r2, r3, #3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	493f      	ldr	r1, [pc, #252]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fddd 	bl	8001a50 <HAL_GetTick>
 8002e96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e9a:	f7fe fdd9 	bl	8001a50 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e066      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 020c 	and.w	r2, r3, #12
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d1eb      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	492c      	ldr	r1, [pc, #176]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d210      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 0207 	bic.w	r2, r3, #7
 8002ef6:	4924      	ldr	r1, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1b0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e036      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4918      	ldr	r1, [pc, #96]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4910      	ldr	r1, [pc, #64]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f4e:	f000 f825 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f52:	4602      	mov	r2, r0
 8002f54:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	490c      	ldr	r1, [pc, #48]	; (8002f90 <HAL_RCC_ClockConfig+0x1b8>)
 8002f60:	5ccb      	ldrb	r3, [r1, r3]
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_RCC_ClockConfig+0x1c0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fd1c 	bl	80019b0 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08005e4c 	.word	0x08005e4c
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	4b3e      	ldr	r3, [pc, #248]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d121      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d11e      	bne.n	800300e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fd0:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fdc:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe2:	0a1b      	lsrs	r3, r3, #8
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e005      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fec:	4b2d      	ldr	r3, [pc, #180]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ff8:	4a2b      	ldr	r2, [pc, #172]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003000:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10d      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300c:	e00a      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b04      	cmp	r3, #4
 8003012:	d102      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003016:	61bb      	str	r3, [r7, #24]
 8003018:	e004      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d101      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003022:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b0c      	cmp	r3, #12
 8003028:	d134      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0xa6>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d003      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0xac>
 8003040:	e005      	b.n	800304e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_RCC_GetSysClockFreq+0x110>)
 8003044:	617b      	str	r3, [r7, #20]
      break;
 8003046:	e005      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800304a:	617b      	str	r3, [r7, #20]
      break;
 800304c:	e002      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	617b      	str	r3, [r7, #20]
      break;
 8003052:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	3301      	adds	r3, #1
 8003060:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	fb02 f203 	mul.w	r2, r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800307a:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	0e5b      	lsrs	r3, r3, #25
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	3301      	adds	r3, #1
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003094:	69bb      	ldr	r3, [r7, #24]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3724      	adds	r7, #36	; 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	08005e64 	.word	0x08005e64
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d0:	f7ff fff0 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08005e5c 	.word	0x08005e5c

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030fc:	f7ff ffda 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0adb      	lsrs	r3, r3, #11
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	08005e5c 	.word	0x08005e5c

08003124 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800312c:	2300      	movs	r3, #0
 800312e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800313c:	f7ff fa02 	bl	8002544 <HAL_PWREx_GetVoltageRange>
 8003140:	6178      	str	r0, [r7, #20]
 8003142:	e014      	b.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800315c:	f7ff f9f2 	bl	8002544 <HAL_PWREx_GetVoltageRange>
 8003160:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003174:	d10b      	bne.n	800318e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d919      	bls.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2ba0      	cmp	r3, #160	; 0xa0
 8003180:	d902      	bls.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003182:	2302      	movs	r3, #2
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e013      	b.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e010      	b.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d902      	bls.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003194:	2303      	movs	r3, #3
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e00a      	b.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b80      	cmp	r3, #128	; 0x80
 800319e:	d102      	bne.n	80031a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031a0:	2302      	movs	r3, #2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	e004      	b.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d101      	bne.n	80031b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031ac:	2301      	movs	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 0207 	bic.w	r2, r3, #7
 80031b8:	4909      	ldr	r1, [pc, #36]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031c0:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d001      	beq.n	80031d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40022000 	.word	0x40022000

080031e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031ec:	2300      	movs	r3, #0
 80031ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031f0:	2300      	movs	r3, #0
 80031f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d041      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003204:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003208:	d02a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800320a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800320e:	d824      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003214:	d008      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321a:	d81e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003224:	d010      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003226:	e018      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003228:	4b86      	ldr	r3, [pc, #536]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a85      	ldr	r2, [pc, #532]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003232:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003234:	e015      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3304      	adds	r3, #4
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fabb 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003246:	e00c      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3320      	adds	r3, #32
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fba6 	bl	80039a0 <RCCEx_PLLSAI2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003258:	e003      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	74fb      	strb	r3, [r7, #19]
      break;
 800325e:	e000      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003276:	4973      	ldr	r1, [pc, #460]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d041      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003298:	d02a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800329a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800329e:	d824      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032aa:	d81e      	bhi.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b4:	d010      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032b6:	e018      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b8:	4b62      	ldr	r3, [pc, #392]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a61      	ldr	r2, [pc, #388]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c4:	e015      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fa73 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032d6:	e00c      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3320      	adds	r3, #32
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fb5e 	bl	80039a0 <RCCEx_PLLSAI2_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e8:	e003      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	74fb      	strb	r3, [r7, #19]
      break;
 80032ee:	e000      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f8:	4b52      	ldr	r3, [pc, #328]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003306:	494f      	ldr	r1, [pc, #316]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800330e:	e001      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	7cfb      	ldrb	r3, [r7, #19]
 8003312:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a0 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003326:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	4a40      	ldr	r2, [pc, #256]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003346:	6593      	str	r3, [r2, #88]	; 0x58
 8003348:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003354:	2301      	movs	r3, #1
 8003356:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003358:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a3a      	ldr	r2, [pc, #232]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003364:	f7fe fb74 	bl	8001a50 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800336a:	e009      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800336c:	f7fe fb70 	bl	8001a50 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	74fb      	strb	r3, [r7, #19]
        break;
 800337e:	e005      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0ef      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d15c      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d019      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	4a20      	ldr	r2, [pc, #128]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033cc:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033dc:	4a19      	ldr	r2, [pc, #100]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ee:	f7fe fb2f 	bl	8001a50 <HAL_GetTick>
 80033f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033f4:	e00b      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fe fb2b 	bl	8001a50 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	; 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d902      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	74fb      	strb	r3, [r7, #19]
            break;
 800340c:	e006      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ec      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	4904      	ldr	r1, [pc, #16]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800343a:	e009      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003450:	7c7b      	ldrb	r3, [r7, #17]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d105      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003456:	4b9e      	ldr	r3, [pc, #632]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	4a9d      	ldr	r2, [pc, #628]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346e:	4b98      	ldr	r3, [pc, #608]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f023 0203 	bic.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	4994      	ldr	r1, [pc, #592]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003490:	4b8f      	ldr	r3, [pc, #572]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 020c 	bic.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	498c      	ldr	r1, [pc, #560]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034b2:	4b87      	ldr	r3, [pc, #540]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4983      	ldr	r1, [pc, #524]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034d4:	4b7e      	ldr	r3, [pc, #504]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	497b      	ldr	r1, [pc, #492]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003504:	4972      	ldr	r1, [pc, #456]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003518:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	496a      	ldr	r1, [pc, #424]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	4961      	ldr	r1, [pc, #388]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800355c:	4b5c      	ldr	r3, [pc, #368]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356a:	4959      	ldr	r1, [pc, #356]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	4950      	ldr	r1, [pc, #320]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	4948      	ldr	r1, [pc, #288]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c2:	4b43      	ldr	r3, [pc, #268]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	493f      	ldr	r1, [pc, #252]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d028      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035e4:	4b3a      	ldr	r3, [pc, #232]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f2:	4937      	ldr	r1, [pc, #220]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003602:	d106      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003604:	4b32      	ldr	r3, [pc, #200]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	e011      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800361a:	d10c      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f8c8 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d028      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003642:	4b23      	ldr	r3, [pc, #140]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	491f      	ldr	r1, [pc, #124]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003660:	d106      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366c:	60d3      	str	r3, [r2, #12]
 800366e:	e011      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003678:	d10c      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3304      	adds	r3, #4
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f899 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02b      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ae:	4908      	ldr	r1, [pc, #32]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036be:	d109      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	4a02      	ldr	r2, [pc, #8]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ca:	60d3      	str	r3, [r2, #12]
 80036cc:	e014      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f867 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02f      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003704:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	4928      	ldr	r1, [pc, #160]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d10d      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	2102      	movs	r1, #2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f844 	bl	80037b8 <RCCEx_PLLSAI1_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800373a:	7cfb      	ldrb	r3, [r7, #19]
 800373c:	74bb      	strb	r3, [r7, #18]
 800373e:	e011      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3320      	adds	r3, #32
 800374e:	2102      	movs	r1, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f925 	bl	80039a0 <RCCEx_PLLSAI2_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	490d      	ldr	r1, [pc, #52]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40021000 	.word	0x40021000

080037b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037c6:	4b75      	ldr	r3, [pc, #468]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d018      	beq.n	8003804 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037d2:	4b72      	ldr	r3, [pc, #456]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0203 	and.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d10d      	bne.n	80037fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
       ||
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037ea:	4b6c      	ldr	r3, [pc, #432]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
       ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d047      	beq.n	800388e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
 8003802:	e044      	b.n	800388e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d018      	beq.n	800383e <RCCEx_PLLSAI1_Config+0x86>
 800380c:	2b03      	cmp	r3, #3
 800380e:	d825      	bhi.n	800385c <RCCEx_PLLSAI1_Config+0xa4>
 8003810:	2b01      	cmp	r3, #1
 8003812:	d002      	beq.n	800381a <RCCEx_PLLSAI1_Config+0x62>
 8003814:	2b02      	cmp	r3, #2
 8003816:	d009      	beq.n	800382c <RCCEx_PLLSAI1_Config+0x74>
 8003818:	e020      	b.n	800385c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800381a:	4b60      	ldr	r3, [pc, #384]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d11d      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800382a:	e01a      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800382c:	4b5b      	ldr	r3, [pc, #364]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d116      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e013      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800383e:	4b57      	ldr	r3, [pc, #348]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800384a:	4b54      	ldr	r3, [pc, #336]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800385a:	e006      	b.n	800386a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      break;
 8003860:	e004      	b.n	800386c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800386a:	bf00      	nop
    }

    if(status == HAL_OK)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10d      	bne.n	800388e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6819      	ldr	r1, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	430b      	orrs	r3, r1
 8003888:	4944      	ldr	r1, [pc, #272]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d17d      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a40      	ldr	r2, [pc, #256]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800389e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe f8d6 	bl	8001a50 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a8:	f7fe f8d2 	bl	8001a50 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038bc:	4b37      	ldr	r3, [pc, #220]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ef      	bne.n	80038a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d160      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d4:	4b31      	ldr	r3, [pc, #196]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6892      	ldr	r2, [r2, #8]
 80038e4:	0211      	lsls	r1, r2, #8
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	0912      	lsrs	r2, r2, #4
 80038ec:	0452      	lsls	r2, r2, #17
 80038ee:	430a      	orrs	r2, r1
 80038f0:	492a      	ldr	r1, [pc, #168]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	610b      	str	r3, [r1, #16]
 80038f6:	e027      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d112      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	0211      	lsls	r1, r2, #8
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6912      	ldr	r2, [r2, #16]
 8003914:	0852      	lsrs	r2, r2, #1
 8003916:	3a01      	subs	r2, #1
 8003918:	0552      	lsls	r2, r2, #21
 800391a:	430a      	orrs	r2, r1
 800391c:	491f      	ldr	r1, [pc, #124]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	610b      	str	r3, [r1, #16]
 8003922:	e011      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800392c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6892      	ldr	r2, [r2, #8]
 8003934:	0211      	lsls	r1, r2, #8
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6952      	ldr	r2, [r2, #20]
 800393a:	0852      	lsrs	r2, r2, #1
 800393c:	3a01      	subs	r2, #1
 800393e:	0652      	lsls	r2, r2, #25
 8003940:	430a      	orrs	r2, r1
 8003942:	4916      	ldr	r1, [pc, #88]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003952:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fe f87c 	bl	8001a50 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800395a:	e009      	b.n	8003970 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800395c:	f7fe f878 	bl	8001a50 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d902      	bls.n	8003970 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	73fb      	strb	r3, [r7, #15]
          break;
 800396e:	e005      	b.n	800397c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ef      	beq.n	800395c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	4904      	ldr	r1, [pc, #16]	; (800399c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000

080039a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0203 	and.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d10d      	bne.n	80039e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
       ||
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
       ||
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d047      	beq.n	8003a76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	e044      	b.n	8003a76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	d018      	beq.n	8003a26 <RCCEx_PLLSAI2_Config+0x86>
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d825      	bhi.n	8003a44 <RCCEx_PLLSAI2_Config+0xa4>
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d002      	beq.n	8003a02 <RCCEx_PLLSAI2_Config+0x62>
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d009      	beq.n	8003a14 <RCCEx_PLLSAI2_Config+0x74>
 8003a00:	e020      	b.n	8003a44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a02:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d11d      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a12:	e01a      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d116      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a24:	e013      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a26:	4b4c      	ldr	r3, [pc, #304]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a32:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a42:	e006      	b.n	8003a52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e004      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e002      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a54:	7bfb      	ldrb	r3, [r7, #15]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	4939      	ldr	r1, [pc, #228]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d167      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd ffe2 	bl	8001a50 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a90:	f7fd ffde 	bl	8001a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1ef      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d14a      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6892      	ldr	r2, [r2, #8]
 8003acc:	0211      	lsls	r1, r2, #8
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68d2      	ldr	r2, [r2, #12]
 8003ad2:	0912      	lsrs	r2, r2, #4
 8003ad4:	0452      	lsls	r2, r2, #17
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	491f      	ldr	r1, [pc, #124]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	614b      	str	r3, [r1, #20]
 8003ade:	e011      	b.n	8003b04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	0211      	lsls	r1, r2, #8
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6912      	ldr	r2, [r2, #16]
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0652      	lsls	r2, r2, #25
 8003afc:	430a      	orrs	r2, r1
 8003afe:	4916      	ldr	r1, [pc, #88]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fd ff9e 	bl	8001a50 <HAL_GetTick>
 8003b14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b16:	e009      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b18:	f7fd ff9a 	bl	8001a50 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d902      	bls.n	8003b2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2a:	e005      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0ef      	beq.n	8003b18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	4904      	ldr	r1, [pc, #16]	; (8003b58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e049      	b.n	8003c02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd fd68 	bl	8001658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fa50 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d109      	bne.n	8003c30 <HAL_TIM_PWM_Start+0x24>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	bf14      	ite	ne
 8003c28:	2301      	movne	r3, #1
 8003c2a:	2300      	moveq	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e03c      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d109      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x3e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	bf14      	ite	ne
 8003c42:	2301      	movne	r3, #1
 8003c44:	2300      	moveq	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e02f      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d109      	bne.n	8003c64 <HAL_TIM_PWM_Start+0x58>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e022      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d109      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x72>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e015      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d109      	bne.n	8003c98 <HAL_TIM_PWM_Start+0x8c>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e008      	b.n	8003caa <HAL_TIM_PWM_Start+0x9e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e09c      	b.n	8003dec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0xb6>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc0:	e023      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0xc6>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd0:	e01b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xd6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ce0:	e013      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0xe6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cf0:	e00b      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIM_PWM_Start+0xf6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d00:	e003      	b.n	8003d0a <HAL_TIM_PWM_Start+0xfe>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd04 	bl	8004720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a35      	ldr	r2, [pc, #212]	; (8003df4 <HAL_TIM_PWM_Start+0x1e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x13e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d00e      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x13e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <HAL_TIM_PWM_Start+0x1f0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x13e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a31      	ldr	r2, [pc, #196]	; (8003e00 <HAL_TIM_PWM_Start+0x1f4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d004      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x13e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <HAL_TIM_PWM_Start+0x1f8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x142>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_TIM_PWM_Start+0x144>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_TIM_PWM_Start+0x1e8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d018      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_TIM_PWM_Start+0x1fc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIM_PWM_Start+0x200>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_TIM_PWM_Start+0x204>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <HAL_TIM_PWM_Start+0x1ec>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_TIM_PWM_Start+0x19e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <HAL_TIM_PWM_Start+0x1f0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d115      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_TIM_PWM_Start+0x208>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b06      	cmp	r3, #6
 8003dba:	d015      	beq.n	8003de8 <HAL_TIM_PWM_Start+0x1dc>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc2:	d011      	beq.n	8003de8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	e008      	b.n	8003de8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e000      	b.n	8003dea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40013400 	.word	0x40013400
 8003dfc:	40014000 	.word	0x40014000
 8003e00:	40014400 	.word	0x40014400
 8003e04:	40014800 	.word	0x40014800
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	00010007 	.word	0x00010007

08003e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ff      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b14      	cmp	r3, #20
 8003e42:	f200 80f0 	bhi.w	8004026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08004027 	.word	0x08004027
 8003e54:	08004027 	.word	0x08004027
 8003e58:	08004027 	.word	0x08004027
 8003e5c:	08003ee1 	.word	0x08003ee1
 8003e60:	08004027 	.word	0x08004027
 8003e64:	08004027 	.word	0x08004027
 8003e68:	08004027 	.word	0x08004027
 8003e6c:	08003f23 	.word	0x08003f23
 8003e70:	08004027 	.word	0x08004027
 8003e74:	08004027 	.word	0x08004027
 8003e78:	08004027 	.word	0x08004027
 8003e7c:	08003f63 	.word	0x08003f63
 8003e80:	08004027 	.word	0x08004027
 8003e84:	08004027 	.word	0x08004027
 8003e88:	08004027 	.word	0x08004027
 8003e8c:	08003fa5 	.word	0x08003fa5
 8003e90:	08004027 	.word	0x08004027
 8003e94:	08004027 	.word	0x08004027
 8003e98:	08004027 	.word	0x08004027
 8003e9c:	08003fe5 	.word	0x08003fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f964 	bl	8004174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]
      break;
 8003ede:	e0a5      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f9d4 	bl	8004294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
      break;
 8003f20:	e084      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fa3d 	bl	80043a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0208 	orr.w	r2, r2, #8
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0204 	bic.w	r2, r2, #4
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	61da      	str	r2, [r3, #28]
      break;
 8003f60:	e064      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 faa5 	bl	80044b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
      break;
 8003fa2:	e043      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 faee 	bl	800458c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fe2:	e023      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fb32 	bl	8004654 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004024:	e002      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
      break;
 800402a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a40      	ldr	r2, [pc, #256]	; (8004154 <TIM_Base_SetConfig+0x114>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3d      	ldr	r2, [pc, #244]	; (8004158 <TIM_Base_SetConfig+0x118>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3c      	ldr	r2, [pc, #240]	; (800415c <TIM_Base_SetConfig+0x11c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3b      	ldr	r2, [pc, #236]	; (8004160 <TIM_Base_SetConfig+0x120>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3a      	ldr	r2, [pc, #232]	; (8004164 <TIM_Base_SetConfig+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d108      	bne.n	8004092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2f      	ldr	r2, [pc, #188]	; (8004154 <TIM_Base_SetConfig+0x114>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d01f      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a0:	d01b      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <TIM_Base_SetConfig+0x118>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d017      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2b      	ldr	r2, [pc, #172]	; (800415c <TIM_Base_SetConfig+0x11c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2a      	ldr	r2, [pc, #168]	; (8004160 <TIM_Base_SetConfig+0x120>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00f      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <TIM_Base_SetConfig+0x124>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a28      	ldr	r2, [pc, #160]	; (8004168 <TIM_Base_SetConfig+0x128>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a27      	ldr	r2, [pc, #156]	; (800416c <TIM_Base_SetConfig+0x12c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_Base_SetConfig+0x9a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a26      	ldr	r2, [pc, #152]	; (8004170 <TIM_Base_SetConfig+0x130>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <TIM_Base_SetConfig+0x114>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <TIM_Base_SetConfig+0xf8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a12      	ldr	r2, [pc, #72]	; (8004164 <TIM_Base_SetConfig+0x124>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00b      	beq.n	8004138 <TIM_Base_SetConfig+0xf8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a11      	ldr	r2, [pc, #68]	; (8004168 <TIM_Base_SetConfig+0x128>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <TIM_Base_SetConfig+0xf8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a10      	ldr	r2, [pc, #64]	; (800416c <TIM_Base_SetConfig+0x12c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_Base_SetConfig+0xf8>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <TIM_Base_SetConfig+0x130>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d103      	bne.n	8004140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	615a      	str	r2, [r3, #20]
}
 8004146:	bf00      	nop
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40000400 	.word	0x40000400
 800415c:	40000800 	.word	0x40000800
 8004160:	40000c00 	.word	0x40000c00
 8004164:	40013400 	.word	0x40013400
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800

08004174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0302 	bic.w	r3, r3, #2
 80041c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <TIM_OC1_SetConfig+0x10c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_OC1_SetConfig+0x80>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <TIM_OC1_SetConfig+0x110>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_OC1_SetConfig+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <TIM_OC1_SetConfig+0x114>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_OC1_SetConfig+0x80>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a29      	ldr	r2, [pc, #164]	; (800428c <TIM_OC1_SetConfig+0x118>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC1_SetConfig+0x80>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a28      	ldr	r2, [pc, #160]	; (8004290 <TIM_OC1_SetConfig+0x11c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10c      	bne.n	800420e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0308 	bic.w	r3, r3, #8
 80041fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 0304 	bic.w	r3, r3, #4
 800420c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <TIM_OC1_SetConfig+0x10c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00f      	beq.n	8004236 <TIM_OC1_SetConfig+0xc2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <TIM_OC1_SetConfig+0x110>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00b      	beq.n	8004236 <TIM_OC1_SetConfig+0xc2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a19      	ldr	r2, [pc, #100]	; (8004288 <TIM_OC1_SetConfig+0x114>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_OC1_SetConfig+0xc2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <TIM_OC1_SetConfig+0x118>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_OC1_SetConfig+0xc2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <TIM_OC1_SetConfig+0x11c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d111      	bne.n	800425a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800423c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00
 8004284:	40013400 	.word	0x40013400
 8004288:	40014000 	.word	0x40014000
 800428c:	40014400 	.word	0x40014400
 8004290:	40014800 	.word	0x40014800

08004294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f023 0210 	bic.w	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0320 	bic.w	r3, r3, #32
 80042e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a28      	ldr	r2, [pc, #160]	; (8004394 <TIM_OC2_SetConfig+0x100>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0x6c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a27      	ldr	r2, [pc, #156]	; (8004398 <TIM_OC2_SetConfig+0x104>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10d      	bne.n	800431c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <TIM_OC2_SetConfig+0x100>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00f      	beq.n	8004344 <TIM_OC2_SetConfig+0xb0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <TIM_OC2_SetConfig+0x104>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00b      	beq.n	8004344 <TIM_OC2_SetConfig+0xb0>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1b      	ldr	r2, [pc, #108]	; (800439c <TIM_OC2_SetConfig+0x108>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_OC2_SetConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1a      	ldr	r2, [pc, #104]	; (80043a0 <TIM_OC2_SetConfig+0x10c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_OC2_SetConfig+0xb0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <TIM_OC2_SetConfig+0x110>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d113      	bne.n	800436c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40012c00 	.word	0x40012c00
 8004398:	40013400 	.word	0x40013400
 800439c:	40014000 	.word	0x40014000
 80043a0:	40014400 	.word	0x40014400
 80043a4:	40014800 	.word	0x40014800

080043a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <TIM_OC3_SetConfig+0xfc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_OC3_SetConfig+0x6a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <TIM_OC3_SetConfig+0x100>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10d      	bne.n	800442e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800442c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <TIM_OC3_SetConfig+0xfc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00f      	beq.n	8004456 <TIM_OC3_SetConfig+0xae>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <TIM_OC3_SetConfig+0x100>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00b      	beq.n	8004456 <TIM_OC3_SetConfig+0xae>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1a      	ldr	r2, [pc, #104]	; (80044ac <TIM_OC3_SetConfig+0x104>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d007      	beq.n	8004456 <TIM_OC3_SetConfig+0xae>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a19      	ldr	r2, [pc, #100]	; (80044b0 <TIM_OC3_SetConfig+0x108>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d003      	beq.n	8004456 <TIM_OC3_SetConfig+0xae>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a18      	ldr	r2, [pc, #96]	; (80044b4 <TIM_OC3_SetConfig+0x10c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d113      	bne.n	800447e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800445c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	621a      	str	r2, [r3, #32]
}
 8004498:	bf00      	nop
 800449a:	371c      	adds	r7, #28
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	031b      	lsls	r3, r3, #12
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <TIM_OC4_SetConfig+0xc0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_OC4_SetConfig+0x84>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <TIM_OC4_SetConfig+0xc4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_OC4_SetConfig+0x84>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <TIM_OC4_SetConfig+0xc8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_OC4_SetConfig+0x84>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <TIM_OC4_SetConfig+0xcc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_OC4_SetConfig+0x84>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a14      	ldr	r2, [pc, #80]	; (8004588 <TIM_OC4_SetConfig+0xd0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d109      	bne.n	8004550 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a17      	ldr	r2, [pc, #92]	; (8004640 <TIM_OC5_SetConfig+0xb4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <TIM_OC5_SetConfig+0x7a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a16      	ldr	r2, [pc, #88]	; (8004644 <TIM_OC5_SetConfig+0xb8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_OC5_SetConfig+0x7a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <TIM_OC5_SetConfig+0xbc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_OC5_SetConfig+0x7a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <TIM_OC5_SetConfig+0xc0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC5_SetConfig+0x7a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a13      	ldr	r2, [pc, #76]	; (8004650 <TIM_OC5_SetConfig+0xc4>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d109      	bne.n	800461a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	621a      	str	r2, [r3, #32]
}
 8004634:	bf00      	nop
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40013400 	.word	0x40013400
 8004648:	40014000 	.word	0x40014000
 800464c:	40014400 	.word	0x40014400
 8004650:	40014800 	.word	0x40014800

08004654 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800469a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	051b      	lsls	r3, r3, #20
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <TIM_OC6_SetConfig+0xb8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00f      	beq.n	80046d0 <TIM_OC6_SetConfig+0x7c>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a17      	ldr	r2, [pc, #92]	; (8004710 <TIM_OC6_SetConfig+0xbc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00b      	beq.n	80046d0 <TIM_OC6_SetConfig+0x7c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a16      	ldr	r2, [pc, #88]	; (8004714 <TIM_OC6_SetConfig+0xc0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <TIM_OC6_SetConfig+0x7c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <TIM_OC6_SetConfig+0xc4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d003      	beq.n	80046d0 <TIM_OC6_SetConfig+0x7c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a14      	ldr	r2, [pc, #80]	; (800471c <TIM_OC6_SetConfig+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d109      	bne.n	80046e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40013400 	.word	0x40013400
 8004714:	40014000 	.word	0x40014000
 8004718:	40014400 	.word	0x40014400
 800471c:	40014800 	.word	0x40014800

08004720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2201      	movs	r2, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a1a      	ldr	r2, [r3, #32]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e068      	b.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2d      	ldr	r2, [pc, #180]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01d      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d018      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1a      	ldr	r2, [pc, #104]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00e      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a13      	ldr	r2, [pc, #76]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a14      	ldr	r2, [pc, #80]	; (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10c      	bne.n	8004844 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4313      	orrs	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40014000 	.word	0x40014000

0800487c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e040      	b.n	8004910 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fc ff92 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fb8e 	bl	8004fdc <UART_SetConfig>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e022      	b.n	8004910 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe0c 	bl	80054f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fe93 	bl	8005634 <UART_CheckIdleState>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b08a      	sub	sp, #40	; 0x28
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492a:	2b20      	cmp	r3, #32
 800492c:	d142      	bne.n	80049b4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_Receive_DMA+0x22>
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e03b      	b.n	80049b6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_UART_Receive_DMA+0x34>
 8004948:	2302      	movs	r3, #2
 800494a:	e034      	b.n	80049b6 <HAL_UART_Receive_DMA+0x9e>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_UART_Receive_DMA+0xa8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d01f      	beq.n	80049a4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d018      	beq.n	80049a4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	e853 3f00 	ldrex	r3, [r3]
 800497e:	613b      	str	r3, [r7, #16]
   return(result);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	623b      	str	r3, [r7, #32]
 8004992:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004994:	69f9      	ldr	r1, [r7, #28]
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	e841 2300 	strex	r3, r2, [r1]
 800499c:	61bb      	str	r3, [r7, #24]
   return(result);
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e6      	bne.n	8004972 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 ff50 	bl	8005850 <UART_Start_Receive_DMA>
 80049b0:	4603      	mov	r3, r0
 80049b2:	e000      	b.n	80049b6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40008000 	.word	0x40008000

080049c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b0ba      	sub	sp, #232	; 0xe8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80049ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80049f2:	4013      	ands	r3, r2
 80049f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80049f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00f      	beq.n	8004a2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d009      	beq.n	8004a2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 82a6 	beq.w	8004f6e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	4798      	blx	r3
      }
      return;
 8004a2a:	e2a0      	b.n	8004f6e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8117 	beq.w	8004c64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a46:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_UART_IRQHandler+0x298>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 810a 	beq.w	8004c64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <HAL_UART_IRQHandler+0xbc>
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00b      	beq.n	8004a80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <HAL_UART_IRQHandler+0xec>
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d011      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x11c>
 8004abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2204      	movs	r2, #4
 8004ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad6:	f043 0202 	orr.w	r2, r3, #2
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d017      	beq.n	8004b1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af0:	f003 0320 	and.w	r3, r3, #32
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00b      	beq.n	8004b1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b12:	f043 0208 	orr.w	r2, r3, #8
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d012      	beq.n	8004b4e <HAL_UART_IRQHandler+0x18a>
 8004b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00c      	beq.n	8004b4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b44:	f043 0220 	orr.w	r2, r3, #32
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 820c 	beq.w	8004f72 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00d      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d007      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d005      	beq.n	8004ba6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04f      	beq.n	8004c46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 ff1e 	bl	80059e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d141      	bne.n	8004c3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d9      	bne.n	8004bba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d013      	beq.n	8004c36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <HAL_UART_IRQHandler+0x29c>)
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd f9b0 	bl	8001f80 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d017      	beq.n	8004c56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00f      	b.n	8004c56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f9ba 	bl	8004fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e00b      	b.n	8004c56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9b6 	bl	8004fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e007      	b.n	8004c56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f9b2 	bl	8004fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004c54:	e18d      	b.n	8004f72 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c56:	bf00      	nop
    return;
 8004c58:	e18b      	b.n	8004f72 <HAL_UART_IRQHandler+0x5ae>
 8004c5a:	bf00      	nop
 8004c5c:	04000120 	.word	0x04000120
 8004c60:	08005c87 	.word	0x08005c87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	f040 8146 	bne.w	8004efa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 813f 	beq.w	8004efa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8138 	beq.w	8004efa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	f040 80b4 	bne.w	8004e0a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 815f 	beq.w	8004f76 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	f080 8157 	bcs.w	8004f76 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 8085 	bne.w	8004dee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1da      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e1      	bne.n	8004d2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	f023 0310 	bic.w	r3, r3, #16
 8004dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e4      	bne.n	8004dae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fd f88b 	bl	8001f04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f8de 	bl	8004fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e08:	e0b5      	b.n	8004f76 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80a7 	beq.w	8004f7a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80a2 	beq.w	8004f7a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e58:	647b      	str	r3, [r7, #68]	; 0x44
 8004e5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e4      	bne.n	8004e36 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3308      	adds	r3, #8
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e90:	633a      	str	r2, [r7, #48]	; 0x30
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e3      	bne.n	8004e6c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0310 	bic.w	r3, r3, #16
 8004eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	69b9      	ldr	r1, [r7, #24]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e4      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f866 	bl	8004fc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ef8:	e03f      	b.n	8004f7a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00e      	beq.n	8004f24 <HAL_UART_IRQHandler+0x560>
 8004f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fef2 	bl	8005d06 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f22:	e02d      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00e      	beq.n	8004f4e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01c      	beq.n	8004f7e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	4798      	blx	r3
    }
    return;
 8004f4c:	e017      	b.n	8004f7e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d012      	beq.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
 8004f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fea3 	bl	8005cb2 <UART_EndTransmit_IT>
    return;
 8004f6c:	e008      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f6e:	bf00      	nop
 8004f70:	e006      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004f7e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f80:	37e8      	adds	r7, #232	; 0xe8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop

08004f88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b5b0      	push	{r4, r5, r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4bad      	ldr	r3, [pc, #692]	; (80052bc <UART_SetConfig+0x2e0>)
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	430b      	orrs	r3, r1
 8005012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4aa2      	ldr	r2, [pc, #648]	; (80052c0 <UART_SetConfig+0x2e4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	4313      	orrs	r3, r2
 8005042:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a99      	ldr	r2, [pc, #612]	; (80052c4 <UART_SetConfig+0x2e8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d121      	bne.n	80050a6 <UART_SetConfig+0xca>
 8005062:	4b99      	ldr	r3, [pc, #612]	; (80052c8 <UART_SetConfig+0x2ec>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b03      	cmp	r3, #3
 800506e:	d817      	bhi.n	80050a0 <UART_SetConfig+0xc4>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x9c>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005095 	.word	0x08005095
 8005080:	0800508f 	.word	0x0800508f
 8005084:	0800509b 	.word	0x0800509b
 8005088:	2301      	movs	r3, #1
 800508a:	76fb      	strb	r3, [r7, #27]
 800508c:	e0e7      	b.n	800525e <UART_SetConfig+0x282>
 800508e:	2302      	movs	r3, #2
 8005090:	76fb      	strb	r3, [r7, #27]
 8005092:	e0e4      	b.n	800525e <UART_SetConfig+0x282>
 8005094:	2304      	movs	r3, #4
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e0e1      	b.n	800525e <UART_SetConfig+0x282>
 800509a:	2308      	movs	r3, #8
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e0de      	b.n	800525e <UART_SetConfig+0x282>
 80050a0:	2310      	movs	r3, #16
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e0db      	b.n	800525e <UART_SetConfig+0x282>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a88      	ldr	r2, [pc, #544]	; (80052cc <UART_SetConfig+0x2f0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d132      	bne.n	8005116 <UART_SetConfig+0x13a>
 80050b0:	4b85      	ldr	r3, [pc, #532]	; (80052c8 <UART_SetConfig+0x2ec>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b0c      	cmp	r3, #12
 80050bc:	d828      	bhi.n	8005110 <UART_SetConfig+0x134>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0xe8>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080050f9 	.word	0x080050f9
 80050c8:	08005111 	.word	0x08005111
 80050cc:	08005111 	.word	0x08005111
 80050d0:	08005111 	.word	0x08005111
 80050d4:	08005105 	.word	0x08005105
 80050d8:	08005111 	.word	0x08005111
 80050dc:	08005111 	.word	0x08005111
 80050e0:	08005111 	.word	0x08005111
 80050e4:	080050ff 	.word	0x080050ff
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005111 	.word	0x08005111
 80050f4:	0800510b 	.word	0x0800510b
 80050f8:	2300      	movs	r3, #0
 80050fa:	76fb      	strb	r3, [r7, #27]
 80050fc:	e0af      	b.n	800525e <UART_SetConfig+0x282>
 80050fe:	2302      	movs	r3, #2
 8005100:	76fb      	strb	r3, [r7, #27]
 8005102:	e0ac      	b.n	800525e <UART_SetConfig+0x282>
 8005104:	2304      	movs	r3, #4
 8005106:	76fb      	strb	r3, [r7, #27]
 8005108:	e0a9      	b.n	800525e <UART_SetConfig+0x282>
 800510a:	2308      	movs	r3, #8
 800510c:	76fb      	strb	r3, [r7, #27]
 800510e:	e0a6      	b.n	800525e <UART_SetConfig+0x282>
 8005110:	2310      	movs	r3, #16
 8005112:	76fb      	strb	r3, [r7, #27]
 8005114:	e0a3      	b.n	800525e <UART_SetConfig+0x282>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6d      	ldr	r2, [pc, #436]	; (80052d0 <UART_SetConfig+0x2f4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d120      	bne.n	8005162 <UART_SetConfig+0x186>
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <UART_SetConfig+0x2ec>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800512a:	2b30      	cmp	r3, #48	; 0x30
 800512c:	d013      	beq.n	8005156 <UART_SetConfig+0x17a>
 800512e:	2b30      	cmp	r3, #48	; 0x30
 8005130:	d814      	bhi.n	800515c <UART_SetConfig+0x180>
 8005132:	2b20      	cmp	r3, #32
 8005134:	d009      	beq.n	800514a <UART_SetConfig+0x16e>
 8005136:	2b20      	cmp	r3, #32
 8005138:	d810      	bhi.n	800515c <UART_SetConfig+0x180>
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <UART_SetConfig+0x168>
 800513e:	2b10      	cmp	r3, #16
 8005140:	d006      	beq.n	8005150 <UART_SetConfig+0x174>
 8005142:	e00b      	b.n	800515c <UART_SetConfig+0x180>
 8005144:	2300      	movs	r3, #0
 8005146:	76fb      	strb	r3, [r7, #27]
 8005148:	e089      	b.n	800525e <UART_SetConfig+0x282>
 800514a:	2302      	movs	r3, #2
 800514c:	76fb      	strb	r3, [r7, #27]
 800514e:	e086      	b.n	800525e <UART_SetConfig+0x282>
 8005150:	2304      	movs	r3, #4
 8005152:	76fb      	strb	r3, [r7, #27]
 8005154:	e083      	b.n	800525e <UART_SetConfig+0x282>
 8005156:	2308      	movs	r3, #8
 8005158:	76fb      	strb	r3, [r7, #27]
 800515a:	e080      	b.n	800525e <UART_SetConfig+0x282>
 800515c:	2310      	movs	r3, #16
 800515e:	76fb      	strb	r3, [r7, #27]
 8005160:	e07d      	b.n	800525e <UART_SetConfig+0x282>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5b      	ldr	r2, [pc, #364]	; (80052d4 <UART_SetConfig+0x2f8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d120      	bne.n	80051ae <UART_SetConfig+0x1d2>
 800516c:	4b56      	ldr	r3, [pc, #344]	; (80052c8 <UART_SetConfig+0x2ec>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d013      	beq.n	80051a2 <UART_SetConfig+0x1c6>
 800517a:	2bc0      	cmp	r3, #192	; 0xc0
 800517c:	d814      	bhi.n	80051a8 <UART_SetConfig+0x1cc>
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d009      	beq.n	8005196 <UART_SetConfig+0x1ba>
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d810      	bhi.n	80051a8 <UART_SetConfig+0x1cc>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <UART_SetConfig+0x1b4>
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d006      	beq.n	800519c <UART_SetConfig+0x1c0>
 800518e:	e00b      	b.n	80051a8 <UART_SetConfig+0x1cc>
 8005190:	2300      	movs	r3, #0
 8005192:	76fb      	strb	r3, [r7, #27]
 8005194:	e063      	b.n	800525e <UART_SetConfig+0x282>
 8005196:	2302      	movs	r3, #2
 8005198:	76fb      	strb	r3, [r7, #27]
 800519a:	e060      	b.n	800525e <UART_SetConfig+0x282>
 800519c:	2304      	movs	r3, #4
 800519e:	76fb      	strb	r3, [r7, #27]
 80051a0:	e05d      	b.n	800525e <UART_SetConfig+0x282>
 80051a2:	2308      	movs	r3, #8
 80051a4:	76fb      	strb	r3, [r7, #27]
 80051a6:	e05a      	b.n	800525e <UART_SetConfig+0x282>
 80051a8:	2310      	movs	r3, #16
 80051aa:	76fb      	strb	r3, [r7, #27]
 80051ac:	e057      	b.n	800525e <UART_SetConfig+0x282>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a49      	ldr	r2, [pc, #292]	; (80052d8 <UART_SetConfig+0x2fc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d125      	bne.n	8005204 <UART_SetConfig+0x228>
 80051b8:	4b43      	ldr	r3, [pc, #268]	; (80052c8 <UART_SetConfig+0x2ec>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c6:	d017      	beq.n	80051f8 <UART_SetConfig+0x21c>
 80051c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051cc:	d817      	bhi.n	80051fe <UART_SetConfig+0x222>
 80051ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d2:	d00b      	beq.n	80051ec <UART_SetConfig+0x210>
 80051d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d8:	d811      	bhi.n	80051fe <UART_SetConfig+0x222>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <UART_SetConfig+0x20a>
 80051de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e2:	d006      	beq.n	80051f2 <UART_SetConfig+0x216>
 80051e4:	e00b      	b.n	80051fe <UART_SetConfig+0x222>
 80051e6:	2300      	movs	r3, #0
 80051e8:	76fb      	strb	r3, [r7, #27]
 80051ea:	e038      	b.n	800525e <UART_SetConfig+0x282>
 80051ec:	2302      	movs	r3, #2
 80051ee:	76fb      	strb	r3, [r7, #27]
 80051f0:	e035      	b.n	800525e <UART_SetConfig+0x282>
 80051f2:	2304      	movs	r3, #4
 80051f4:	76fb      	strb	r3, [r7, #27]
 80051f6:	e032      	b.n	800525e <UART_SetConfig+0x282>
 80051f8:	2308      	movs	r3, #8
 80051fa:	76fb      	strb	r3, [r7, #27]
 80051fc:	e02f      	b.n	800525e <UART_SetConfig+0x282>
 80051fe:	2310      	movs	r3, #16
 8005200:	76fb      	strb	r3, [r7, #27]
 8005202:	e02c      	b.n	800525e <UART_SetConfig+0x282>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <UART_SetConfig+0x2e4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d125      	bne.n	800525a <UART_SetConfig+0x27e>
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <UART_SetConfig+0x2ec>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800521c:	d017      	beq.n	800524e <UART_SetConfig+0x272>
 800521e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005222:	d817      	bhi.n	8005254 <UART_SetConfig+0x278>
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d00b      	beq.n	8005242 <UART_SetConfig+0x266>
 800522a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522e:	d811      	bhi.n	8005254 <UART_SetConfig+0x278>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <UART_SetConfig+0x260>
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d006      	beq.n	8005248 <UART_SetConfig+0x26c>
 800523a:	e00b      	b.n	8005254 <UART_SetConfig+0x278>
 800523c:	2300      	movs	r3, #0
 800523e:	76fb      	strb	r3, [r7, #27]
 8005240:	e00d      	b.n	800525e <UART_SetConfig+0x282>
 8005242:	2302      	movs	r3, #2
 8005244:	76fb      	strb	r3, [r7, #27]
 8005246:	e00a      	b.n	800525e <UART_SetConfig+0x282>
 8005248:	2304      	movs	r3, #4
 800524a:	76fb      	strb	r3, [r7, #27]
 800524c:	e007      	b.n	800525e <UART_SetConfig+0x282>
 800524e:	2308      	movs	r3, #8
 8005250:	76fb      	strb	r3, [r7, #27]
 8005252:	e004      	b.n	800525e <UART_SetConfig+0x282>
 8005254:	2310      	movs	r3, #16
 8005256:	76fb      	strb	r3, [r7, #27]
 8005258:	e001      	b.n	800525e <UART_SetConfig+0x282>
 800525a:	2310      	movs	r3, #16
 800525c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <UART_SetConfig+0x2e4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	f040 8087 	bne.w	8005378 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800526a:	7efb      	ldrb	r3, [r7, #27]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d837      	bhi.n	80052e0 <UART_SetConfig+0x304>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x29c>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800529d 	.word	0x0800529d
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052ab 	.word	0x080052ab
 800528c:	080052e1 	.word	0x080052e1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052b3 	.word	0x080052b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800529c:	f7fd ff16 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 80052a0:	6178      	str	r0, [r7, #20]
        break;
 80052a2:	e022      	b.n	80052ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <UART_SetConfig+0x300>)
 80052a6:	617b      	str	r3, [r7, #20]
        break;
 80052a8:	e01f      	b.n	80052ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052aa:	f7fd fe77 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 80052ae:	6178      	str	r0, [r7, #20]
        break;
 80052b0:	e01b      	b.n	80052ea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b6:	617b      	str	r3, [r7, #20]
        break;
 80052b8:	e017      	b.n	80052ea <UART_SetConfig+0x30e>
 80052ba:	bf00      	nop
 80052bc:	efff69f3 	.word	0xefff69f3
 80052c0:	40008000 	.word	0x40008000
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40021000 	.word	0x40021000
 80052cc:	40004400 	.word	0x40004400
 80052d0:	40004800 	.word	0x40004800
 80052d4:	40004c00 	.word	0x40004c00
 80052d8:	40005000 	.word	0x40005000
 80052dc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	76bb      	strb	r3, [r7, #26]
        break;
 80052e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 80f1 	beq.w	80054d4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d305      	bcc.n	800530e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d902      	bls.n	8005314 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	76bb      	strb	r3, [r7, #26]
 8005312:	e0df      	b.n	80054d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4618      	mov	r0, r3
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	020b      	lsls	r3, r1, #8
 8005326:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800532a:	0202      	lsls	r2, r0, #8
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	6849      	ldr	r1, [r1, #4]
 8005330:	0849      	lsrs	r1, r1, #1
 8005332:	4608      	mov	r0, r1
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	1814      	adds	r4, r2, r0
 800533a:	eb43 0501 	adc.w	r5, r3, r1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	461a      	mov	r2, r3
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fb fa42 	bl	80007d4 <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4613      	mov	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800535e:	d308      	bcc.n	8005372 <UART_SetConfig+0x396>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005366:	d204      	bcs.n	8005372 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	60da      	str	r2, [r3, #12]
 8005370:	e0b0      	b.n	80054d4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	76bb      	strb	r3, [r7, #26]
 8005376:	e0ad      	b.n	80054d4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d15b      	bne.n	800543a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005382:	7efb      	ldrb	r3, [r7, #27]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d828      	bhi.n	80053da <UART_SetConfig+0x3fe>
 8005388:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x3b4>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fd fe8a 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 80053b8:	6178      	str	r0, [r7, #20]
        break;
 80053ba:	e013      	b.n	80053e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fd fe9c 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 80053c0:	6178      	str	r0, [r7, #20]
        break;
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b49      	ldr	r3, [pc, #292]	; (80054ec <UART_SetConfig+0x510>)
 80053c6:	617b      	str	r3, [r7, #20]
        break;
 80053c8:	e00c      	b.n	80053e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fd fde7 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 80053ce:	6178      	str	r0, [r7, #20]
        break;
 80053d0:	e008      	b.n	80053e4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d6:	617b      	str	r3, [r7, #20]
        break;
 80053d8:	e004      	b.n	80053e4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	76bb      	strb	r3, [r7, #26]
        break;
 80053e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d074      	beq.n	80054d4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	005a      	lsls	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d916      	bls.n	8005434 <UART_SetConfig+0x458>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540c:	d212      	bcs.n	8005434 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	b29b      	uxth	r3, r3
 8005412:	f023 030f 	bic.w	r3, r3, #15
 8005416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	085b      	lsrs	r3, r3, #1
 800541c:	b29b      	uxth	r3, r3
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	b29a      	uxth	r2, r3
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	4313      	orrs	r3, r2
 8005428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	89fa      	ldrh	r2, [r7, #14]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	e04f      	b.n	80054d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	76bb      	strb	r3, [r7, #26]
 8005438:	e04c      	b.n	80054d4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800543a:	7efb      	ldrb	r3, [r7, #27]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d828      	bhi.n	8005492 <UART_SetConfig+0x4b6>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x46c>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	0800546d 	.word	0x0800546d
 800544c:	08005475 	.word	0x08005475
 8005450:	0800547d 	.word	0x0800547d
 8005454:	08005493 	.word	0x08005493
 8005458:	08005483 	.word	0x08005483
 800545c:	08005493 	.word	0x08005493
 8005460:	08005493 	.word	0x08005493
 8005464:	08005493 	.word	0x08005493
 8005468:	0800548b 	.word	0x0800548b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7fd fe2e 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005470:	6178      	str	r0, [r7, #20]
        break;
 8005472:	e013      	b.n	800549c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005474:	f7fd fe40 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8005478:	6178      	str	r0, [r7, #20]
        break;
 800547a:	e00f      	b.n	800549c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800547c:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <UART_SetConfig+0x510>)
 800547e:	617b      	str	r3, [r7, #20]
        break;
 8005480:	e00c      	b.n	800549c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005482:	f7fd fd8b 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8005486:	6178      	str	r0, [r7, #20]
        break;
 8005488:	e008      	b.n	800549c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548e:	617b      	str	r3, [r7, #20]
        break;
 8005490:	e004      	b.n	800549c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	76bb      	strb	r3, [r7, #26]
        break;
 800549a:	bf00      	nop
    }

    if (pclk != 0U)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d018      	beq.n	80054d4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	085a      	lsrs	r2, r3, #1
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	441a      	add	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d909      	bls.n	80054d0 <UART_SetConfig+0x4f4>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c2:	d205      	bcs.n	80054d0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	e001      	b.n	80054d4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054e0:	7ebb      	ldrb	r3, [r7, #26]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ea:	bf00      	nop
 80054ec:	00f42400 	.word	0x00f42400

080054f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	f003 0320 	and.w	r3, r3, #32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01a      	beq.n	8005606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ee:	d10a      	bne.n	8005606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  }
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af02      	add	r7, sp, #8
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005644:	f7fc fa04 	bl	8001a50 <HAL_GetTick>
 8005648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0308 	and.w	r3, r3, #8
 8005654:	2b08      	cmp	r3, #8
 8005656:	d10e      	bne.n	8005676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f82d 	bl	80056c6 <UART_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e023      	b.n	80056be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b04      	cmp	r3, #4
 8005682:	d10e      	bne.n	80056a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f817 	bl	80056c6 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e00d      	b.n	80056be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b09c      	sub	sp, #112	; 0x70
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d6:	e0a5      	b.n	8005824 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056de:	f000 80a1 	beq.w	8005824 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e2:	f7fc f9b5 	bl	8001a50 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d302      	bcc.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80056f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d13e      	bne.n	8005776 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800570c:	667b      	str	r3, [r7, #100]	; 0x64
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005716:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005718:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800571c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800571e:	e841 2300 	strex	r3, r2, [r1]
 8005722:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1e6      	bne.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005734:	e853 3f00 	ldrex	r3, [r3]
 8005738:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	663b      	str	r3, [r7, #96]	; 0x60
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800574a:	64ba      	str	r2, [r7, #72]	; 0x48
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e5      	bne.n	800572a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e067      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d04f      	beq.n	8005824 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d147      	bne.n	8005824 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800579c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
 80057be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	613b      	str	r3, [r7, #16]
   return(result);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3308      	adds	r3, #8
 80057ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057f0:	623a      	str	r2, [r7, #32]
 80057f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	69f9      	ldr	r1, [r7, #28]
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e5      	bne.n	80057d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e010      	b.n	8005846 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4013      	ands	r3, r2
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	429a      	cmp	r2, r3
 8005840:	f43f af4a 	beq.w	80056d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3770      	adds	r7, #112	; 0x70
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b096      	sub	sp, #88	; 0x58
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2222      	movs	r2, #34	; 0x22
 8005878:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	2b00      	cmp	r3, #0
 8005880:	d02b      	beq.n	80058da <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005886:	4a42      	ldr	r2, [pc, #264]	; (8005990 <UART_Start_Receive_DMA+0x140>)
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	4a41      	ldr	r2, [pc, #260]	; (8005994 <UART_Start_Receive_DMA+0x144>)
 8005890:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	4a40      	ldr	r2, [pc, #256]	; (8005998 <UART_Start_Receive_DMA+0x148>)
 8005898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	2200      	movs	r2, #0
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	4619      	mov	r1, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	461a      	mov	r2, r3
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	f7fc fac5 	bl	8001e44 <HAL_DMA_Start_IT>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2210      	movs	r2, #16
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e055      	b.n	8005986 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005908:	64bb      	str	r3, [r7, #72]	; 0x48
 800590a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800590e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e6      	bne.n	80058ea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3308      	adds	r3, #8
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	653b      	str	r3, [r7, #80]	; 0x50
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3308      	adds	r3, #8
 800593a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800593c:	637a      	str	r2, [r7, #52]	; 0x34
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3308      	adds	r3, #8
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005970:	623a      	str	r2, [r7, #32]
 8005972:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	69f9      	ldr	r1, [r7, #28]
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	61bb      	str	r3, [r7, #24]
   return(result);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3758      	adds	r7, #88	; 0x58
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	08005aaf 	.word	0x08005aaf
 8005994:	08005bd3 	.word	0x08005bd3
 8005998:	08005c0b 	.word	0x08005c0b

0800599c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	613b      	str	r3, [r7, #16]
   return(result);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e6      	bne.n	80059a4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	679a      	str	r2, [r3, #120]	; 0x78
}
 80059dc:	bf00      	nop
 80059de:	3724      	adds	r7, #36	; 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b095      	sub	sp, #84	; 0x54
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e6      	bne.n	80059f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3308      	adds	r3, #8
 8005a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d118      	bne.n	8005a90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e6      	bne.n	8005a5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005aa2:	bf00      	nop
 8005aa4:	3754      	adds	r7, #84	; 0x54
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b09c      	sub	sp, #112	; 0x70
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d170      	bne.n	8005bac <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8005aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005af6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e6      	bne.n	8005ad2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b24:	647a      	str	r2, [r7, #68]	; 0x44
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	623b      	str	r3, [r7, #32]
   return(result);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b58:	633a      	str	r2, [r7, #48]	; 0x30
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	2220      	movs	r2, #32
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d118      	bne.n	8005bac <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b98:	61fb      	str	r3, [r7, #28]
 8005b9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e6      	bne.n	8005b7a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bbe:	f7ff fa01 	bl	8004fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bc2:	e002      	b.n	8005bca <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8005bc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bc6:	f7fb f921 	bl	8000e0c <HAL_UART_RxCpltCallback>
}
 8005bca:	bf00      	nop
 8005bcc:	3770      	adds	r7, #112	; 0x70
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d109      	bne.n	8005bfc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff f9e5 	bl	8004fc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bfa:	e002      	b.n	8005c02 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff f9cd 	bl	8004f9c <HAL_UART_RxHalfCpltCallback>
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b086      	sub	sp, #24
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	d109      	bne.n	8005c46 <UART_DMAError+0x3c>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	2b21      	cmp	r3, #33	; 0x21
 8005c36:	d106      	bne.n	8005c46 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005c40:	6978      	ldr	r0, [r7, #20]
 8005c42:	f7ff feab 	bl	800599c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d109      	bne.n	8005c68 <UART_DMAError+0x5e>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b22      	cmp	r3, #34	; 0x22
 8005c58:	d106      	bne.n	8005c68 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7ff fec0 	bl	80059e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6e:	f043 0210 	orr.w	r2, r3, #16
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7ff f999 	bl	8004fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7e:	bf00      	nop
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f7ff f983 	bl	8004fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005caa:	bf00      	nop
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e6      	bne.n	8005cba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff f945 	bl	8004f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cfe:	bf00      	nop
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <__libc_init_array>:
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	4d0d      	ldr	r5, [pc, #52]	; (8005d54 <__libc_init_array+0x38>)
 8005d20:	4c0d      	ldr	r4, [pc, #52]	; (8005d58 <__libc_init_array+0x3c>)
 8005d22:	1b64      	subs	r4, r4, r5
 8005d24:	10a4      	asrs	r4, r4, #2
 8005d26:	2600      	movs	r6, #0
 8005d28:	42a6      	cmp	r6, r4
 8005d2a:	d109      	bne.n	8005d40 <__libc_init_array+0x24>
 8005d2c:	4d0b      	ldr	r5, [pc, #44]	; (8005d5c <__libc_init_array+0x40>)
 8005d2e:	4c0c      	ldr	r4, [pc, #48]	; (8005d60 <__libc_init_array+0x44>)
 8005d30:	f000 f880 	bl	8005e34 <_init>
 8005d34:	1b64      	subs	r4, r4, r5
 8005d36:	10a4      	asrs	r4, r4, #2
 8005d38:	2600      	movs	r6, #0
 8005d3a:	42a6      	cmp	r6, r4
 8005d3c:	d105      	bne.n	8005d4a <__libc_init_array+0x2e>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d44:	4798      	blx	r3
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7ee      	b.n	8005d28 <__libc_init_array+0xc>
 8005d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4e:	4798      	blx	r3
 8005d50:	3601      	adds	r6, #1
 8005d52:	e7f2      	b.n	8005d3a <__libc_init_array+0x1e>
 8005d54:	08005e9c 	.word	0x08005e9c
 8005d58:	08005e9c 	.word	0x08005e9c
 8005d5c:	08005e9c 	.word	0x08005e9c
 8005d60:	08005ea0 	.word	0x08005ea0

08005d64 <memcpy>:
 8005d64:	440a      	add	r2, r1
 8005d66:	4291      	cmp	r1, r2
 8005d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d6c:	d100      	bne.n	8005d70 <memcpy+0xc>
 8005d6e:	4770      	bx	lr
 8005d70:	b510      	push	{r4, lr}
 8005d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	d1f9      	bne.n	8005d72 <memcpy+0xe>
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <memset>:
 8005d80:	4402      	add	r2, r0
 8005d82:	4603      	mov	r3, r0
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d100      	bne.n	8005d8a <memset+0xa>
 8005d88:	4770      	bx	lr
 8005d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d8e:	e7f9      	b.n	8005d84 <memset+0x4>

08005d90 <fmaxf>:
 8005d90:	b508      	push	{r3, lr}
 8005d92:	ed2d 8b02 	vpush	{d8}
 8005d96:	eeb0 8a40 	vmov.f32	s16, s0
 8005d9a:	eef0 8a60 	vmov.f32	s17, s1
 8005d9e:	f000 f82d 	bl	8005dfc <__fpclassifyf>
 8005da2:	b148      	cbz	r0, 8005db8 <fmaxf+0x28>
 8005da4:	eeb0 0a68 	vmov.f32	s0, s17
 8005da8:	f000 f828 	bl	8005dfc <__fpclassifyf>
 8005dac:	b130      	cbz	r0, 8005dbc <fmaxf+0x2c>
 8005dae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	dc01      	bgt.n	8005dbc <fmaxf+0x2c>
 8005db8:	eeb0 8a68 	vmov.f32	s16, s17
 8005dbc:	eeb0 0a48 	vmov.f32	s0, s16
 8005dc0:	ecbd 8b02 	vpop	{d8}
 8005dc4:	bd08      	pop	{r3, pc}

08005dc6 <fminf>:
 8005dc6:	b508      	push	{r3, lr}
 8005dc8:	ed2d 8b02 	vpush	{d8}
 8005dcc:	eeb0 8a40 	vmov.f32	s16, s0
 8005dd0:	eef0 8a60 	vmov.f32	s17, s1
 8005dd4:	f000 f812 	bl	8005dfc <__fpclassifyf>
 8005dd8:	b148      	cbz	r0, 8005dee <fminf+0x28>
 8005dda:	eeb0 0a68 	vmov.f32	s0, s17
 8005dde:	f000 f80d 	bl	8005dfc <__fpclassifyf>
 8005de2:	b130      	cbz	r0, 8005df2 <fminf+0x2c>
 8005de4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	d401      	bmi.n	8005df2 <fminf+0x2c>
 8005dee:	eeb0 8a68 	vmov.f32	s16, s17
 8005df2:	eeb0 0a48 	vmov.f32	s0, s16
 8005df6:	ecbd 8b02 	vpop	{d8}
 8005dfa:	bd08      	pop	{r3, pc}

08005dfc <__fpclassifyf>:
 8005dfc:	ee10 3a10 	vmov	r3, s0
 8005e00:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8005e04:	d00d      	beq.n	8005e22 <__fpclassifyf+0x26>
 8005e06:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8005e0a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8005e0e:	d30a      	bcc.n	8005e26 <__fpclassifyf+0x2a>
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <__fpclassifyf+0x34>)
 8005e12:	1e42      	subs	r2, r0, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d908      	bls.n	8005e2a <__fpclassifyf+0x2e>
 8005e18:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8005e1c:	4258      	negs	r0, r3
 8005e1e:	4158      	adcs	r0, r3
 8005e20:	4770      	bx	lr
 8005e22:	2002      	movs	r0, #2
 8005e24:	4770      	bx	lr
 8005e26:	2004      	movs	r0, #4
 8005e28:	4770      	bx	lr
 8005e2a:	2003      	movs	r0, #3
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	007ffffe 	.word	0x007ffffe

08005e34 <_init>:
 8005e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e36:	bf00      	nop
 8005e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3a:	bc08      	pop	{r3}
 8005e3c:	469e      	mov	lr, r3
 8005e3e:	4770      	bx	lr

08005e40 <_fini>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr
